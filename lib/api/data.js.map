{"version":3,"sources":["../../src/api/data.js"],"names":["api","loadExtension","data","recordToObject","record","attachNativeRecord","includeHiddenColumns","ui","getDefaultForm","selectedRecord","object","gridValues","raw","gridColumns","apiRef","parent","Values","forEach","item","getVal","Type","UID","property","columnProperty","IsHidden","Definition","Name","value","_record","recordsToObjects","form","records","map","noop","objectToRecord","options","operationCallback","parentMVC","actions","execute","dvCore","NewRecord","result","success","Error","actionMessage","Object","keys","key","objKeys","k","i","lookForPropertyName","recordProperty","find","toLowerCase","expr","Array","isArray","replace","SetValue","propertyId","PropertyID","expression","length","objectsToRecords","objects","objectToNewRecord","console","log","setValuesForRecord","index","indexOf","objectsToForm","progressBar","progressIncrement","useOrdinalMatching","makeDataStateDirty","factory","View","objectCount","Promise","resolve","batchCount","Math","ceil","app","dv","mvc","setBulkInsert","maxValue","importBatchRecords","importData","importForm","lowerLimit","upperLimit","recordCodePropertyID","primaryRecordType","CodePropertyID","recordCodePropertyName","recordIndex","importItem","internalRecordID","clientRecord","Record","RecordID","code","floor","random","toString","gridRecord","createRecord","addRecord","_State","types","EntityStates","Unmodified","columnCounter","maxDataColumns","contextGridColumnValues","valueIndex","col","gridValue","dynamicValue","Value","dynamicValueEdit","hasOwnProperty","valueToImport","values","decodeURIComponent","ex","_debugMode","gridValueToMerge","displayProperties","getText","setText","e","batchIdx","processChunk","min","progressMessage","setTimeout","then","columnArrayToObjects","columns","includeColumnUIDs","column","some","uid","header","treeItem","summaryText","recordArrayToObjects","groupItemArrayToObjects","groupItems","sort","groupItemsSorter","groupItem","children","getAllChildRecords","formToObjects","grouped","hierarchical","gridController","mvcColumns","gridColumn","filter","Boolean","groupTree","expandCollapseAllGroups","boundArray","objs","getSortedRecords","a","b","generateGridValuesMap","formOrGridRecord","entities","GridRecord","gridValuesMap","objectToGridRecord","valueToSet","DataType","PropertyDataType","DateTime","Date","isValid","setValue","getExpressionValue","parentRecord","formula","Formula","viewID","drivingView","ViewID","helpers","create","evaluate","setBinaryValue","base64Value","fileName","fileDate","fileHash","GridValue","valueMetadata","Key","JSON","stringify","Modified","updateUI","dataLoaded","uiGrid","vrp"],"mappings":"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","sourcesContent":["export default (() => {\n    /**\n     * Extends the api.data namespace with additional helper functions.\n     * Dependencies:\n     *    api.loadExtension\n     *    api.ui\n     *    api.actions\n     */\n    api.loadExtension(\"api.data\", () => {\n        if (!api.data.recordToObject) {\n            api.data.recordToObject = (record, attachNativeRecord = false, includeHiddenColumns = false) => {\n                if (!record)\n                    record = api.ui.getDefaultForm().selectedRecord;\n                const object = {};\n                if (!record.gridValues) {\n                    record = record.raw;\n                }\n                const gridColumns = record.apiRef.parent.raw.gridColumns;\n                record.gridValues.Values.forEach(item => {\n                    if (includeHiddenColumns || !gridColumns.getVal({ Type: \"Column\", UID: item.property.UID}).columnProperty.IsHidden) {\n                        object[item.property.Definition.Name] = item.value;\n                        object[item.property.Name] = item.value;\n                    }\n                });\n                if (attachNativeRecord) {\n                    object._record = record;\n                }\n                return object;\n            };\n        }\n\n        if (!api.data.recordsToObjects) {\n            api.data.recordsToObjects = (form, attachNativeRecord = false, includeHiddenColumns = false) => {\n                if (!form)\n                    form = api.ui.getDefaultForm();\n                return form.records.Values.map(item => api.data.recordToObject(item, attachNativeRecord, includeHiddenColumns));\n            };\n        }\n\n        let noop = function() {};\n\n        if (!api.data.objectToRecord) {\n            api.data.objectToRecord = (object, options, operationCallback = noop) => {\n                let { form, record, map } = options;\n                if (record && !form) {\n                    // If a record was provided, use its form\n                    form = record.parent || record.parentMVC;\n                }\n                if (!form) {\n                    // If no form was provided or detected, use the default one\n                    form = api.ui.getDefaultForm();\n                }\n                if (!record) {\n                    // If no record was provided, create one on the identified form\n                    api.actions.execute(form, api.actions.dvCore.NewRecord, {}, result => {\n                        if (result.success) {\n                            record = form.apiRef.selectedRecord.raw;\n                        } else {\n                            throw new Error(result.actionMessage);\n                        }\n                    });\n                }\n                if (!map) {\n                    // If no map was provided, assume keys/property names match between object and record\n                    map = {};\n                    Object.keys(object).forEach(key => map[key] = key);\n                }\n                // Transfer the values from the object to the record\n                let objKeys = Object.keys(map);\n                for (let i = 0, k = objKeys.length; i < k; i++) {\n                    let key = objKeys[i];\n                    const lookForPropertyName = map[key];\n                    const recordProperty = lookForPropertyName && record.gridValues.Values.find(item => {\n                        return item.property.Definition.Name.toLowerCase() === lookForPropertyName.toLowerCase() || item.property.Name.toLowerCase() === lookForPropertyName.toLowerCase();\n                    });\n                    if (recordProperty) {\n                        //If the key on the incoming object is an array, use it's first element\n                        let expr = Array.isArray(object[key]) ? object[key][0] : object[key];\n                        //If we have an invalid expression, add an escape character\n                        if (typeof expr === \"string\") {\n                            expr = expr\n                                .replace(/'/g, \"''\")\n                                .replace(/}/g, \"' + Char(125) + '\");\n                        }\n                        api.actions.execute(form, api.actions.dvCore.SetValue, {\n                            propertyId: recordProperty.property.PropertyID,\n                            expression: `'${expr}'`\n                        }, result => {\n                            if (!result.success) {\n                                throw new Error(result.actionMessage);\n                            }\n                        });\n                    }\n                }\n                if (!!operationCallback) {\n                    operationCallback(record);\n                    return record;\n                }\n            };\n        }\n\n        if (!api.data.objectsToRecords) {\n            api.data.objectsToRecords = (objects, options) => {\n                return objects.forEach(item => api.data.objectToRecord(item, options));\n            };\n        }\n\n        if (!api.data.objectToNewRecord) {\n            api.data.objectToNewRecord = (object, options, operationCallback = noop) => {\n                console.log(\"DEPRECATED: This may not work as expected.\");\n                let { form, map } = options;\n                let record;\n                if (!form) {\n                    // If no form was provided or detected, use the default one\n                    form = api.ui.getDefaultForm();\n                }\n                // Create new record on the identified form\n                api.actions.execute(form, api.actions.dvCore.NewRecord, {}, result => {\n                    if (!result.success) {\n                        throw new Error(result.actionMessage);\n                    }\n                    else {\n                        record = form.apiRef.selectedRecord.raw;\n                        if (!map) {\n                            // If no map was provided, assume keys/property names match between object and record\n                            map = {};\n                            Object.keys(object).forEach(key => object[key] = key);\n                        }\n                        // Transfer the values from the object to the record\n                        let keys = Object.keys(map);\n                        (function setValuesForRecord (index) {\n                            let key = keys[index];\n                            const lookForPropertyName = map[key];\n                            const recordProperty = lookForPropertyName && record.gridValues.Values.find(item => {\n                                return item.property.Definition.Name.toLowerCase() === lookForPropertyName.toLowerCase() || item.property.Name.toLowerCase() === lookForPropertyName.toLowerCase();\n                            });\n                            if (recordProperty) {\n                                //If the key on the incoming object is an array, use it's first element\n                                let expr = Array.isArray(object[key]) ? object[key][0] : object[key];\n                                //If we have an invalid expression, add an escape character\n                                if (expr != null && expr.indexOf(\"'\") > -1) {\n                                    expr = expr.replace(/'/g, \"''\");\n                                }\n                                api.actions.execute(form, api.actions.dvCore.SetValue, {\n                                    propertyId: recordProperty.property.PropertyID,\n                                    expression: `'${expr}'`\n                                }, result => {\n                                    if (!result.success) {\n                                        throw new Error(result.actionMessage);\n                                    }\n                                    if (index === keys.length - 1) {\n                                        operationCallback(record);\n                                        return record;\n                                    }\n                                    else {\n                                        index++;\n                                        setValuesForRecord(index);\n                                    }\n                                });\n                            }\n                        })(0);\n                    }\n                });\n            };\n        }\n\n        if (!api.data.objectsToForm) {\n            api.data.objectsToForm = ({\n                objects,\n                form,\n                progressBar,\n                progressIncrement = 50,\n                useOrdinalMatching = false,\n                makeDataStateDirty = true,\n            }) => {\n                if (!Array.isArray(objects)) {\n                    throw new Error(\"The objects parameter must be an array of objects.\");\n                }\n\n                // Make sure we've got a raw form (may be an API reference)\n                if (form instanceof api.factory.View) {\n                    form = form.raw;\n                }\n                const objectCount = objects.length;\n\n                return new Promise((resolve) => {\n                    const batchCount = Math.ceil(objectCount / progressIncrement);\n\n                    // Prevent UI updates while adding records\n                    app.dv.mvc.setBulkInsert(form, true);\n\n                    if (progressBar) {\n                        progressBar.maxValue = objectCount;\n                        progressBar.value = 0;\n                    }\n\n                    const importBatchRecords = (importData, importForm, lowerLimit, upperLimit) => {\n                        return new Promise((resolve) => {\n                            const recordCodePropertyID = importForm && importForm.primaryRecordType && importForm.primaryRecordType.Definition && importForm.primaryRecordType.Definition.CodePropertyID;\n                            const recordCodePropertyName = importForm.gridColumns.getVal(recordCodePropertyID).property.Name;\n                            for (let recordIndex = lowerLimit; recordIndex < upperLimit; recordIndex++) {\n                                const importItem = importData[recordIndex];\n                                // Check to see if there is an attached existing native record and replace it instead of creating a new record\n                                const internalRecordID = importItem._record && importItem._record.clientRecord && importItem._record.clientRecord.Record && importItem._record.clientRecord.Record.RecordID &&\n                                      importItem._record.clientRecord.Record.RecordID;\n                                const code = (importItem[recordCodePropertyName] || Math.floor(Math.random() * Math.floor(10000))).toString();\n                                let gridRecord;\n                                if (internalRecordID > 0) {\n                                    // Attempt to use any existing record\n                                    gridRecord = importForm.records.getVal(internalRecordID);\n                                }\n                                if (!gridRecord) {\n                                    // Create a new GridRecord if necessary\n                                    gridRecord = app.dv.mvc.createRecord(importForm, code);\n                                    // Assign the internal record ID in case the record exists but the form does not currently have it loaded\n                                    gridRecord.clientRecord.Record.RecordID = internalRecordID || gridRecord.clientRecord.Record.RecordID;\n                                    // Only add the record to the MVC if it's not already there\n                                    app.dv.mvc.addRecord(importForm, gridRecord, null);\n                                }\n                                if (!makeDataStateDirty) {\n                                    // Set data state to not dirty if so indicated\n                                    gridRecord.clientRecord.Record._State = app.dv.types.EntityStates.Unmodified;\n                                }\n                                // whether this is a new or found record, we now need to merge it.\n                                let columnCounter = 1;\n                                const maxDataColumns = importItem.length;\n                                const contextGridColumnValues = importForm.gridColumns.Values;\n\n                                for (let valueIndex = 0; valueIndex < contextGridColumnValues.length; valueIndex++) {\n                                    try {\n                                        // if we are out of columns in our data, import no more.\n                                        if (columnCounter >= maxDataColumns) { break; }\n\n                                        // get the current column\n                                        const col = contextGridColumnValues[valueIndex];\n\n                                        if (col.property.UID === recordCodePropertyID.UID) {\n                                            if (!makeDataStateDirty) {\n                                                // Set data state to not dirty if so indicated\n                                                const gridValue = gridRecord.gridValues.getVal(recordCodePropertyID);\n                                                gridValue.dynamicValue._State = app.dv.types.EntityStates.Unmodified;\n                                                gridValue.dynamicValue.Value = gridValue.dynamicValueEdit.Value;\n                                                gridValue.dynamicValueEdit = null;\n                                            }\n                                            // skip the record code property, it was either used to create the record or find it.\n                                            continue;\n                                        }\n\n                                        if (useOrdinalMatching && col.columnProperty.IsHidden == true) {\n                                            // if the column is hidden, it shouldn't be touched by the import.\n                                            continue;\n                                        }\n\n                                        if (importItem.hasOwnProperty(col.property.Name)) {\n                                            // get the import value by name or position.\n                                            let valueToImport = useOrdinalMatching ?\n                                                Object.values(importItem)[columnCounter] :\n                                                importItem[col.property.Name];\n                                            try {\n                                                //Try to decode URI the value\n                                                valueToImport = decodeURIComponent(valueToImport);\n                                            }\n                                            catch(ex) {\n                                                //There was an error decoding the data\n                                                if (api._debugMode) console.log(`An error occurred while performing a decodeURI on row: ${i} column ${columnCounter}`);\n                                            }\n                                            columnCounter++;\n\n                                            // if the text value is \"null\", then assume that it really is a null value.\n                                            if (valueToImport.toLowerCase() == \"null\") { valueToImport = null; }\n                                            if ((valueToImport == null || valueToImport == \"\")) {\n                                                // if they are trying to load an empty value into a new record, skip this.\n                                                continue;\n                                            }\n\n                                            // get the grid value for this column property in this record.\n                                            const gridValueToMerge = gridRecord.gridValues.getVal(col.property.PropertyID);\n\n                                            if (gridValueToMerge.displayProperties.getText() !== valueToImport) {\n                                                // update/merge the value.\n                                                gridValueToMerge.displayProperties.setText(valueToImport);\n                                                if (!makeDataStateDirty) {\n                                                    // Set data state to not dirty if so indicated\n                                                    gridValueToMerge.dynamicValue._State = app.dv.types.EntityStates.Unmodified;\n                                                    gridValueToMerge.dynamicValue.Value = gridValueToMerge.dynamicValueEdit.Value;\n                                                    gridValueToMerge.dynamicValueEdit = null;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    catch (e) {\n                                        app.dv.mvc.setBulkInsert(importForm, false);\n                                    }\n                                }\n                            }\n                            resolve();\n                        });\n                    }\n\n                    let batchIdx = 0;\n                    const processChunk = () => {\n\n                        if (batchIdx === batchCount) {\n                            // stop bulk insert on the MVC and show the records that were imported in the MVC grid...\n                            app.dv.mvc.setBulkInsert(form, false);\n                            resolve();\n                            return;\n                        }\n\n                        const lowerLimit = batchIdx * progressIncrement;\n                        const upperLimit = Math.min(lowerLimit + progressIncrement, objectCount);\n                        // if (upperLimit > objectCount) { upperLimit = objectCount; }\n                        if (progressBar) {\n                            progressBar.value = upperLimit;\n                            progressBar.progressMessage = `${upperLimit} / ${objectCount}`;\n                        }\n\n                        setTimeout (() => {\n                            importBatchRecords(objects, form, lowerLimit, upperLimit).then(() => {\n                                batchIdx++;\n                                processChunk();\n                            });\n                        }, 50);\n                    }\n\n                    processChunk();\n                });\n            };\n        }\n\n        if (!api.data.columnArrayToObjects) {\n            api.data.columnArrayToObjects = (columns, includeColumnUIDs) => {\n                const object = {};\n                (columns||[]).forEach(column => {\n                    if (column && column.property && column.property.Definition && column.property.Definition.Name) {\n                        if (!includeColumnUIDs || includeColumnUIDs.some(uid => uid === column.property.UID)) {\n                            object[column.property.Definition.Name] = column.value;\n                        }\n                    } else if (column && column.header && column.treeItem) {\n                        object[\"\"] = `${column.treeItem.value.value} - ${column.treeItem.summaryText()}`;\n                    }\n                });\n                return object;\n            };\n        }\n\n        if (!api.data.recordArrayToObjects) {\n            api.data.recordArrayToObjects = (records, includeColumnUIDs) => {\n                return (records||[]).map(record => api.data.columnArrayToObjects(record, includeColumnUIDs));\n            };\n        }\n\n        if (!api.data.groupItemArrayToObjects) {\n            api.data.groupItemArrayToObjects = (groupItems, includeColumnUIDs) => {\n                return (groupItems||[]).sort(api.data.groupItemsSorter).map(groupItem => ({\n                    [`${groupItem.value.property.Definition.Name}`]: groupItem.value.value,\n                    records: groupItem.children && groupItem.children.length ?\n                             api.data.groupItemArrayToObjects(groupItem.children, includeColumnUIDs) :\n                             api.data.recordArrayToObjects(groupItem.getAllChildRecords(), includeColumnUIDs),\n                }));\n            };\n        }\n\n        if (!api.data.formToObjects) {\n            api.data.formToObjects = ({\n                form = api.ui.getDefaultForm(),\n                includeHiddenColumns = false,\n                grouped = true,\n                hierarchical = false,\n            }) => {\n                // Make sure we've got a raw form (may be an API reference)\n                if (form instanceof api.factory.View) {\n                    form = form.raw;\n                }\n                const gridController = form.gridController;\n                const includeColumnUIDs =  gridController.mvcColumns.map(gridColumn => {\n                    if (includeHiddenColumns || !gridColumn.columnProperty.IsHidden) {\n                        return gridColumn.property.UID;\n                    }\n                }).filter(gridColumn => Boolean(gridColumn));\n                if (hierarchical) {\n                    return api.data.groupItemArrayToObjects(gridController.groupTree, includeColumnUIDs);\n                } else if (grouped) {\n                    //  The boundArray property only includes visible rows, so we need to expand all groups first\n                    gridController.expandCollapseAllGroups(true);\n                    return api.data.recordArrayToObjects(gridController.boundArray.objs, includeColumnUIDs);\n                } else {\n                    //  The getSortedRecords method only includes visible rows, so we need to expand all groups first\n                    gridController.expandCollapseAllGroups(true);\n                    return api.data.recordArrayToObjects(gridController.getSortedRecords().map(record => record.gridValues.Values), includeColumnUIDs);\n                }\n            };\n        }\n\n        if (!api.data.groupItemsSorter) {\n            api.data.groupItemsSorter = (a, b) => {\n                if (a.value.value > b.value.value) {\n                    return 1;\n                }\n                if (a.value.value < b.value.value) {\n                    return -1;\n                }\n                return 0;\n            };\n        }\n\n        if (!api.data.generateGridValuesMap) {\n            api.data.generateGridValuesMap = (formOrGridRecord) => {\n                const gridRecord = formOrGridRecord instanceof app.dv.entities.GridRecord ?\n                      formOrGridRecord :\n                      app.dv.mvc.createRecord(formOrGridRecord, \"\");\n                const gridValuesMap = {};\n                gridRecord.gridValues.Values.forEach(gridValue => {\n                    gridValuesMap[`${gridValue.property.Name}`] = gridValue;\n                });\n                return gridValuesMap;\n            };\n        }\n\n        if (!api.data.objectToGridRecord) {\n            api.data.objectToGridRecord = (form, object, gridRecord = app.dv.mvc.createRecord(form, \"\")) => {\n                const gridValuesMap = api.data.generateGridValuesMap(gridRecord);\n                for (let key in object) {\n                    const gridValue = gridValuesMap[key];\n                    if (gridValue) {\n                        let valueToSet = object[key];\n                        if (gridValue.dynamicValue.DataType === app.dv.types.PropertyDataType.DateTime) {\n                            valueToSet = new Date(valueToSet);\n                            if (!valueToSet.isValid()) {\n                                valueToSet = null;\n                            }\n                        }\n                        gridValue.setValue(valueToSet);\n                    }\n                };\n                return gridRecord;\n            }\n        }\n\n        if (!api.data.getExpressionValue) {\n            api.data.getExpressionValue = (gridValue) => {\n                const gridRecord = gridValue.parentRecord;\n                const form = gridRecord.parentMVC;\n                const property = gridValue.property;\n                const formula = property.Definition.Formula;\n                if (formula) {\n                    const viewID = form.drivingView.ViewID;\n                    const expression = new app.dv.helpers.expression.create(property, viewID, formula, null, form);\n                    return expression.evaluate(viewID, gridRecord);\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        if (!api.data.setBinaryValue) {\n            api.data.setBinaryValue = (gridValue, base64Value, fileName, fileDate = new Date(), fileHash = \"\") => {\n                if (gridValue instanceof app.dv.entities.GridValue) {\n                    const valueMetadata = [\n                        { Key: \"FileSize\", Value: base64Value.length },\n                        { Key: \"FileName\", Value: fileName },\n                        { Key: \"FileDate\", Value: fileDate },\n                        { Key: \"FileHash\", Value: fileHash },\n                    ];\n                    app.dv.mvc.gridRecord.gridValue.setBinaryValue(gridValue, JSON.stringify(valueMetadata));\n                    gridValue.dynamicValueEdit.Value = base64Value;\n                    gridValue.dynamicValueEdit._State = app.dv.types.EntityStates.Modified;\n                    gridValue.updateUI();\n                    const mvc = gridValue && gridValue.parentRecord && gridValue.parentRecord.parentMVC;\n                    const gridController = mvc && mvc.gridController;\n                    if (gridController) {\n                        gridController.dataLoaded(mvc);\n                        gridController.uiGrid.vrp();\n                    }\n                } else {\n                    if (api._debugMode) console.log(`${gridValue} is not a GridValue.`);\n                }\n            };\n        }\n    });\n})();\n"],"file":"data.js"}