{"version":3,"sources":["../../src/api/data.js"],"names":["api","loadExtension","data","recordToObject","record","attachNativeRecord","includeHiddenColumns","ui","getDefaultForm","selectedRecord","object","gridValues","raw","gridColumns","apiRef","parent","Values","forEach","item","getVal","Type","UID","property","columnProperty","IsHidden","Definition","Name","value","_record","recordsToObjects","form","records","map","noop","objectToRecord","options","operationCallback","parentMVC","actions","execute","dvCore","NewRecord","result","success","Error","actionMessage","Object","keys","key","objKeys","k","i","lookForPropertyName","recordProperty","find","toLowerCase","expr","Array","isArray","replace","SetValue","propertyId","PropertyID","expression","length","objectsToRecords","objects","objectToNewRecord","console","log","setValuesForRecord","index","indexOf","objectsToForm","progressBar","progressIncrement","useOrdinalMatching","makeDataStateDirty","factory","View","objectCount","Promise","resolve","batchCount","Math","ceil","app","dv","mvc","setBulkInsert","maxValue","importBatchRecords","importData","importForm","lowerLimit","upperLimit","recordCodePropertyID","primaryRecordType","CodePropertyID","recordCodePropertyName","recordIndex","importItem","internalRecordID","clientRecord","Record","RecordID","code","floor","random","toString","gridRecord","createRecord","addRecord","_State","types","EntityStates","Unmodified","columnCounter","maxDataColumns","contextGridColumnValues","valueIndex","col","gridValue","dynamicValue","Value","dynamicValueEdit","hasOwnProperty","valueToImport","values","decodeURIComponent","ex","gridValueToMerge","displayProperties","getText","setText","e","batchIdx","processChunk","min","progressMessage","setTimeout","then","columnArrayToObjects","columns","includeColumnUIDs","column","some","uid","header","treeItem","summaryText","recordArrayToObjects","groupItemArrayToObjects","groupItems","sort","groupItemsSorter","groupItem","children","getAllChildRecords","formToObjects","grouped","hierarchical","gridController","mvcColumns","gridColumn","filter","Boolean","groupTree","expandCollapseAllGroups","boundArray","objs","getSortedRecords","a","b","generateGridValuesMap","formOrGridRecord","entities","GridRecord","gridValuesMap","objectToGridRecord","valueToSet","DataType","PropertyDataType","DateTime","Date","isValid","setValue","getExpressionValue","parentRecord","formula","Formula","viewID","drivingView","ViewID","helpers","create","evaluate","getEndpointResult","endpointName","inputParameters","reject","connection","call","error"],"mappings":"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","sourcesContent":["/**\n * Custom Action: Extend api.data\n * Extends the api.data namespace with additional helper functions.\n * Dependencies:\n *    api.loadExtension\n *    api.ui\n */\napi.loadExtension(\"api.data\", () => {\n    if (!api.data.recordToObject) {\n        api.data.recordToObject = (record, attachNativeRecord = false, includeHiddenColumns = false) => {\n            if (!record)\n                record = api.ui.getDefaultForm().selectedRecord;\n            const object = {};\n            if (!record.gridValues) {\n                record = record.raw;\n            }\n            const gridColumns = record.apiRef.parent.raw.gridColumns;\n            record.gridValues.Values.forEach(item => {\n                if (includeHiddenColumns || !gridColumns.getVal({ Type: \"Column\", UID: item.property.UID}).columnProperty.IsHidden) {\n                    object[item.property.Definition.Name] = item.value;\n                    object[item.property.Name] = item.value;\n                }\n            });\n            if (attachNativeRecord) {\n                object._record = record;\n            }\n            return object;\n        };\n    }\n\n    if (!api.data.recordsToObjects) {\n        api.data.recordsToObjects = (form, attachNativeRecord = false, includeHiddenColumns = false) => {\n            if (!form)\n                form = api.ui.getDefaultForm();\n            return form.records.Values.map(item => api.data.recordToObject(item, attachNativeRecord, includeHiddenColumns));\n        };\n    }\n\n    let noop = function() {};\n\n    if (!api.data.objectToRecord) {\n        api.data.objectToRecord = (object, options, operationCallback = noop) => {\n            let { form, record, map } = options;\n            if (record && !form) {\n                // If a record was provided, use its form\n                form = record.parent || record.parentMVC;\n            }\n            if (!form) {\n                // If no form was provided or detected, use the default one\n                form = api.ui.getDefaultForm();\n            }\n            if (!record) {\n                // If no record was provided, create one on the identified form\n                api.actions.execute(form, api.actions.dvCore.NewRecord, {}, result => {\n                    if (result.success) {\n                        record = form.apiRef.selectedRecord.raw;\n                    } else {\n                        throw new Error(result.actionMessage);\n                    }\n                });\n            }\n            if (!map) {\n                // If no map was provided, assume keys/property names match between object and record\n                map = {};\n                Object.keys(object).forEach(key => map[key] = key);\n            }\n            // Transfer the values from the object to the record\n            let objKeys = Object.keys(map);\n            for (let i = 0, k = objKeys.length; i < k; i++) {\n                let key = objKeys[i];\n                const lookForPropertyName = map[key];\n                const recordProperty = lookForPropertyName && record.gridValues.Values.find(item => {\n                    return item.property.Definition.Name.toLowerCase() === lookForPropertyName.toLowerCase() || item.property.Name.toLowerCase() === lookForPropertyName.toLowerCase();\n                });\n                if (recordProperty) {\n                    //If the key on the incoming object is an array, use it's first element\n                    let expr = Array.isArray(object[key]) ? object[key][0] : object[key];\n                    //If we have an invalid expression, add an escape character\n                    if (typeof expr === \"string\") {\n                        expr = expr\n                            .replace(/'/g, \"''\")\n                            .replace(/}/g, \"' + Char(125) + '\");\n                    }\n                    api.actions.execute(form, api.actions.dvCore.SetValue, {\n                        propertyId: recordProperty.property.PropertyID,\n                        expression: `'${expr}'`\n                    }, result => {\n                        if (!result.success) {\n                            throw new Error(result.actionMessage);\n                        }\n                    });\n                }\n            }\n            if (!!operationCallback) {\n                operationCallback(record);\n                return record;\n            }\n        };\n    }\n\n    if (!api.data.objectsToRecords) {\n        api.data.objectsToRecords = (objects, options) => {\n            return objects.forEach(item => api.data.objectToRecord(item, options));\n        };\n    }\n\n    if (!api.data.objectToNewRecord) {\n        api.data.objectToNewRecord = (object, options, operationCallback = noop) => {\n            console.log(\"DEPRECATED: This may not work as expected.\");\n            let { form, map } = options;\n            let record;\n            if (!form) {\n                // If no form was provided or detected, use the default one\n                form = api.ui.getDefaultForm();\n            }\n            // Create new record on the identified form\n            api.actions.execute(form, api.actions.dvCore.NewRecord, {}, result => {\n                if (!result.success) {\n                    throw new Error(result.actionMessage);\n                }\n                else {\n                    record = form.apiRef.selectedRecord.raw;\n                    if (!map) {\n                        // If no map was provided, assume keys/property names match between object and record\n                        map = {};\n                        Object.keys(object).forEach(key => object[key] = key);\n                    }\n                    // Transfer the values from the object to the record\n                    let keys = Object.keys(map);\n                    (function setValuesForRecord (index) {\n                        let key = keys[index];\n                        const lookForPropertyName = map[key];\n                        const recordProperty = lookForPropertyName && record.gridValues.Values.find(item => {\n                            return item.property.Definition.Name.toLowerCase() === lookForPropertyName.toLowerCase() || item.property.Name.toLowerCase() === lookForPropertyName.toLowerCase();\n                        });\n                        if (recordProperty) {\n                            //If the key on the incoming object is an array, use it's first element\n                            let expr = Array.isArray(object[key]) ? object[key][0] : object[key];\n                            //If we have an invalid expression, add an escape character\n                            if (expr != null && expr.indexOf(\"'\") > -1) {\n                                expr = expr.replace(/'/g, \"''\");\n                            }\n                            api.actions.execute(form, api.actions.dvCore.SetValue, {\n                                propertyId: recordProperty.property.PropertyID,\n                                expression: `'${expr}'`\n                            }, result => {\n                                if (!result.success) {\n                                    throw new Error(result.actionMessage);\n                                }\n                                if (index === keys.length - 1) {\n                                    operationCallback(record);\n                                    return record;\n                                }\n                                else {\n                                    index++;\n                                    setValuesForRecord(index);\n                                }\n                            });\n                        }\n                    })(0);\n                }\n            });\n        };\n    }\n\n    if (!api.data.objectsToForm) {\n        api.data.objectsToForm = ({\n            objects,\n            form,\n            progressBar,\n            progressIncrement = 50,\n            useOrdinalMatching = false,\n            makeDataStateDirty = true,\n        }) => {\n            if (!Array.isArray(objects)) {\n                throw new Error(\"The objects parameter must be an array of objects.\");\n            }\n\n            // Make sure we've got a raw form (may be an API reference)\n            if (form instanceof api.factory.View) {\n                form = form.raw;\n            }\n            const objectCount = objects.length;\n\n            return new Promise((resolve) => {\n                const batchCount = Math.ceil(objectCount / progressIncrement);\n\n                // Prevent UI updates while adding records\n                app.dv.mvc.setBulkInsert(form, true);\n\n                if (progressBar) {\n                    progressBar.maxValue = objectCount;\n                    progressBar.value = 0;\n                }\n\n                const importBatchRecords = (importData, importForm, lowerLimit, upperLimit) => {\n                    return new Promise((resolve) => {\n                        const recordCodePropertyID = importForm && importForm.primaryRecordType && importForm.primaryRecordType.Definition && importForm.primaryRecordType.Definition.CodePropertyID;\n                        const recordCodePropertyName = importForm.gridColumns.getVal(recordCodePropertyID).property.Name;\n                        for (let recordIndex = lowerLimit; recordIndex < upperLimit; recordIndex++) {\n                            const importItem = importData[recordIndex];\n                            // Check to see if there is an attached existing native record and replace it instead of creating a new record\n                            const internalRecordID = importItem._record && importItem._record.clientRecord && importItem._record.clientRecord.Record && importItem._record.clientRecord.Record.RecordID &&\n                                  importItem._record.clientRecord.Record.RecordID;\n                            const code = (importItem[recordCodePropertyName] || Math.floor(Math.random() * Math.floor(10000))).toString();\n                            let gridRecord;\n                            if (internalRecordID > 0) {\n                                // Attempt to use any existing record\n                                gridRecord = importForm.records.getVal(internalRecordID);\n                            }\n                            if (!gridRecord) {\n                                // Create a new GridRecord if necessary\n                                gridRecord = app.dv.mvc.createRecord(importForm, code);\n                                // Assign the internal record ID in case the record exists but the form does not currently have it loaded\n                                gridRecord.clientRecord.Record.RecordID = internalRecordID || gridRecord.clientRecord.Record.RecordID;\n                                // Only add the record to the MVC if it's not already there\n                                app.dv.mvc.addRecord(importForm, gridRecord, null);\n                            }\n                            if (!makeDataStateDirty) {\n                                // Set data state to not dirty if so indicated\n                                gridRecord.clientRecord.Record._State = app.dv.types.EntityStates.Unmodified;\n                            }\n                            // whether this is a new or found record, we now need to merge it.\n                            let columnCounter = 1;\n                            const maxDataColumns = importItem.length;\n                            const contextGridColumnValues = importForm.gridColumns.Values;\n\n                            for (let valueIndex = 0; valueIndex < contextGridColumnValues.length; valueIndex++) {\n                                try {\n                                    // if we are out of columns in our data, import no more.\n                                    if (columnCounter >= maxDataColumns) { break; }\n\n                                    // get the current column\n                                    const col = contextGridColumnValues[valueIndex];\n\n                                    if (col.property.UID === recordCodePropertyID.UID) {\n                                        if (!makeDataStateDirty) {\n                                            // Set data state to not dirty if so indicated\n                                            const gridValue = gridRecord.gridValues.getVal(recordCodePropertyID);\n                                            gridValue.dynamicValue._State = app.dv.types.EntityStates.Unmodified;\n                                            gridValue.dynamicValue.Value = gridValue.dynamicValueEdit.Value;\n                                            gridValue.dynamicValueEdit = null;\n                                        }\n                                        // skip the record code property, it was either used to create the record or find it.\n                                        continue;\n                                    }\n\n                                    if (useOrdinalMatching && col.columnProperty.IsHidden == true) {\n                                        // if the column is hidden, it shouldn't be touched by the import.\n                                        continue;\n                                    }\n\n                                    if (importItem.hasOwnProperty(col.property.Name)) {\n                                        // get the import value by name or position.\n                                        let valueToImport = useOrdinalMatching ?\n                                            Object.values(importItem)[columnCounter] :\n                                            importItem[col.property.Name];\n                                        try {\n                                            //Try to decode URI the value\n                                            valueToImport = decodeURIComponent(valueToImport);\n                                        }\n                                        catch(ex) {\n                                            //There was an error decoding the data\n                                            console.log(`An error occurred while performing a decodeURI on row: ${i} column ${columnCounter}`);\n                                        }\n                                        columnCounter++;\n\n                                        // if the text value is \"null\", then assume that it really is a null value.\n                                        if (valueToImport.toLowerCase() == \"null\") { valueToImport = null; }\n                                        if ((valueToImport == null || valueToImport == \"\")) {\n                                            // if they are trying to load an empty value into a new record, skip this.\n                                            continue;\n                                        }\n\n                                        // get the grid value for this column property in this record.\n                                        const gridValueToMerge = gridRecord.gridValues.getVal(col.property.PropertyID);\n\n                                        if (gridValueToMerge.displayProperties.getText() !== valueToImport) {\n                                            // update/merge the value.\n                                            gridValueToMerge.displayProperties.setText(valueToImport);\n                                            if (!makeDataStateDirty) {\n                                                // Set data state to not dirty if so indicated\n                                                gridValueToMerge.dynamicValue._State = app.dv.types.EntityStates.Unmodified;\n                                                gridValueToMerge.dynamicValue.Value = gridValueToMerge.dynamicValueEdit.Value;\n                                                gridValueToMerge.dynamicValueEdit = null;\n                                            }\n                                        }\n                                    }\n                                }\n                                catch (e) {\n                                    app.dv.mvc.setBulkInsert(importForm, false);\n                                }\n                            }\n                        }\n                        resolve();\n                    });\n                }\n\n                let batchIdx = 0;\n                const processChunk = () => {\n\n                    if (batchIdx === batchCount) {\n                        // stop bulk insert on the MVC and show the records that were imported in the MVC grid...\n                        app.dv.mvc.setBulkInsert(form, false);\n                        resolve();\n                        return;\n                    }\n\n                    const lowerLimit = batchIdx * progressIncrement;\n                    const upperLimit = Math.min(lowerLimit + progressIncrement, objectCount);\n                    // if (upperLimit > objectCount) { upperLimit = objectCount; }\n                    if (progressBar) {\n                        progressBar.value = upperLimit;\n                        progressBar.progressMessage = `${upperLimit} / ${objectCount}`;\n                    }\n\n                    setTimeout (() => {\n                        importBatchRecords(objects, form, lowerLimit, upperLimit).then(() => {\n                            batchIdx++;\n                            processChunk();\n                        });\n                    }, 50);\n                }\n\n                processChunk();\n            });\n        };\n    }\n\n    if (!api.data.columnArrayToObjects) {\n        api.data.columnArrayToObjects = (columns, includeColumnUIDs) => {\n            const object = {};\n            (columns||[]).forEach(column => {\n                if (column && column.property && column.property.Definition && column.property.Definition.Name) {\n                    if (!includeColumnUIDs || includeColumnUIDs.some(uid => uid === column.property.UID)) {\n                        object[column.property.Definition.Name] = column.value;\n                    }\n                } else if (column && column.header && column.treeItem) {\n                    object[\"\"] = `${column.treeItem.value.value} - ${column.treeItem.summaryText()}`;\n                }\n            });\n            return object;\n        };\n    }\n\n    if (!api.data.recordArrayToObjects) {\n        api.data.recordArrayToObjects = (records, includeColumnUIDs) => {\n            return (records||[]).map(record => api.data.columnArrayToObjects(record, includeColumnUIDs));\n        };\n    }\n\n    if (!api.data.groupItemArrayToObjects) {\n        api.data.groupItemArrayToObjects = (groupItems, includeColumnUIDs) => {\n            return (groupItems||[]).sort(api.data.groupItemsSorter).map(groupItem => ({\n                [`${groupItem.value.property.Definition.Name}`]: groupItem.value.value,\n                records: groupItem.children && groupItem.children.length ?\n                         api.data.groupItemArrayToObjects(groupItem.children, includeColumnUIDs) :\n                         api.data.recordArrayToObjects(groupItem.getAllChildRecords(), includeColumnUIDs),\n            }));\n        };\n    }\n\n    if (!api.data.formToObjects) {\n        api.data.formToObjects = ({\n            form = api.ui.getDefaultForm(),\n            includeHiddenColumns = false,\n            grouped = true,\n            hierarchical = false,\n        }) => {\n            // Make sure we've got a raw form (may be an API reference)\n            if (form instanceof api.factory.View) {\n                form = form.raw;\n            }\n            const gridController = form.gridController;\n            const includeColumnUIDs =  gridController.mvcColumns.map(gridColumn => {\n                if (includeHiddenColumns || !gridColumn.columnProperty.IsHidden) {\n                    return gridColumn.property.UID;\n                }\n            }).filter(gridColumn => Boolean(gridColumn));\n            if (hierarchical) {\n                return api.data.groupItemArrayToObjects(gridController.groupTree, includeColumnUIDs);\n            } else if (grouped) {\n                //  The boundArray property only includes visible rows, so we need to expand all groups first\n                gridController.expandCollapseAllGroups(true);\n                return api.data.recordArrayToObjects(gridController.boundArray.objs, includeColumnUIDs);\n            } else {\n                //  The getSortedRecords method only includes visible rows, so we need to expand all groups first\n                gridController.expandCollapseAllGroups(true);\n                return api.data.recordArrayToObjects(gridController.getSortedRecords().map(record => record.gridValues.Values), includeColumnUIDs);\n            }\n        };\n    }\n\n    if (!api.data.groupItemsSorter) {\n        api.data.groupItemsSorter = (a, b) => {\n            if (a.value.value > b.value.value) {\n                return 1;\n            }\n            if (a.value.value < b.value.value) {\n                return -1;\n            }\n            return 0;\n        };\n    }\n\n    if (!api.data.generateGridValuesMap) {\n        api.data.generateGridValuesMap = (formOrGridRecord) => {\n            const gridRecord = formOrGridRecord instanceof app.dv.entities.GridRecord ?\n                  formOrGridRecord :\n                  app.dv.mvc.createRecord(formOrGridRecord, \"\");\n            const gridValuesMap = {};\n            gridRecord.gridValues.Values.forEach(gridValue => {\n                gridValuesMap[`${gridValue.property.Name}`] = gridValue;\n            });\n            return gridValuesMap;\n        };\n    }\n\n    if (!api.data.objectToGridRecord) {\n        api.data.objectToGridRecord = (form, object, gridRecord = app.dv.mvc.createRecord(form, \"\")) => {\n            const gridValuesMap = api.data.generateGridValuesMap(gridRecord);\n            for (let key in object) {\n                const gridValue = gridValuesMap[key];\n                if (gridValue) {\n                    let valueToSet = object[key];\n                    if (gridValue.dynamicValue.DataType === app.dv.types.PropertyDataType.DateTime) {\n                        valueToSet = new Date(valueToSet);\n                        if (!valueToSet.isValid()) {\n                            valueToSet = null;\n                        }\n                    }\n                    gridValue.setValue(valueToSet);\n                }\n            };\n            return gridRecord;\n        }\n    }\n\n    if (!api.data.getExpressionValue) {\n        api.data.getExpressionValue = (gridValue) => {\n            const gridRecord = gridValue.parentRecord;\n            const form = gridRecord.parentMVC;\n            const property = gridValue.property;\n            const formula = property.Definition.Formula;\n            if (formula) {\n                const viewID = form.drivingView.ViewID;\n                const expression = new app.dv.helpers.expression.create(property, viewID, formula, null, form);\n                return expression.evaluate(viewID, gridRecord);\n            } else {\n                return null;\n            }\n        }\n    }\n\n    if (!api.data.getEndpointResult) {\n         api.data.getEndpointResult = async (endpointName, inputParameters = {}) => {\n             try {\n                 return new Promise((resolve, reject) => {\n                     if (endpointName) {\n                         // const input = eval(`(function() { return ${inputParameters}; })()`);\n                         app.connection.call(\"Custom\", endpointName, inputParameters, (result, error) => {\n                             resolve(result);\n                         });\n                     } else {\n                         reject(\"There is no endpoint specified.\");\n                     }\n                 });\n             } catch (exc) {\n                 throw exc;\n             }\n         }\n     }\n });\n"],"file":"data.js"}