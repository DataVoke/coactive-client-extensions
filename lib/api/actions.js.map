{"version":3,"sources":["../../src/api/actions.js"],"names":["api","loadExtension","actions","Object","entries","length","app","dv","actionLibrary","actionStores","execute","inlineExe","FormRequestBehaviorModes","Normal","types","OPEN_MODES","NORMAL","Hidden","HIDDEN","Modal","MODAL","Maximized","MAXIMIZED","Fail","runTaskAsync","formID","taskID","mode","Promise","resolve","reject","runTask","form","dvCore","CallActionChain","viewID","macroID","result","success","actionMessage","utils","getOpenForm","openFormAsync","then","f"],"mappings":"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","sourcesContent":["export default (() => {\n    /**\n     * Extends the api.actions namespace with additional helper functions.\n     * Dependencies:\n     *    api.loadExtension\n     *    api.utils.getOpenForm\n     *    api.utils.openFormAsync\n     */\n    api.loadExtension(\"api.actions\", () => {\n        if (!api.actions || Object.entries(api.actions).length === 0) {\n            // API shortcut to built-in and custom action library stores\n            api.actions = app.dv.actionLibrary.actionStores;\n        }\n\n        if (!api.actions.execute) {\n            // API shortcut to action library execution command\n            api.actions.execute = app.dv.actionLibrary.inlineExe;\n        }\n\n        if (!api.actions.FormRequestBehaviorModes) {\n            api.actions.FormRequestBehaviorModes = {\n                Normal: app.dv.types.OPEN_MODES.NORMAL,\n                Hidden: app.dv.types.OPEN_MODES.HIDDEN,\n                Modal: app.dv.types.OPEN_MODES.MODAL,\n                Maximized: app.dv.types.OPEN_MODES.MAXIMIZED,\n                Fail: -1,\n            };\n        }\n\n        if (!api.actions.runTaskAsync) {\n            /**\n             * Runs a form's task.\n             * @param {Object} formID                                            A numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n             * @param {number} taskID                                            A numeric ID that identifies the task.\n             * @param {number} [mode=api.actions.FormRequestBehavior.Normal]     One of the [api.actions.FormRequestBehaviorModes] to use when opening the form.\n             * @returns {Promise}                                                A promise that resolves after the task is sucessfully executed.\n             */\n            api.actions.runTaskAsync = (formID, taskID, mode = api.actions.FormRequestBehaviorModes.Normal) => {\n                return new Promise((resolve, reject) => {\n                    // Function to run the task after we have the form\n                    const runTask = form => {\n                        app.dv.actionLibrary.inlineExe(form, app.dv.actionLibrary.actionStores.dvCore.CallActionChain, { viewID: formID, macroID: taskID }, result => {\n                            if (result.success) {\n                                resolve();\n                            } else {\n                                reject(`The task (ID: ${taskID}) on form (ID: ${formID}) could not be executed.${result.actionMessage ? \" Action Message: \" + result.actionMessage : \"\"}`);\n                            }\n                        });\n                    };\n\n                    // Assume the form is already open, and find it\n                    const form = api.utils.getOpenForm(formID);\n                    if (form) {\n                        // We have a form, so run the task\n                        runTask(form);\n                    } else {\n                        // If the form was not already open, attempt to open it unless requested to fail\n                        if (mode !== api.actions.FormRequestBehaviorModes.Fail) {\n                            api.utils.openFormAsync(formID, mode).then(f => {\n                                runTask(f);\n                            });\n                        } else {\n                            reject(`The form (ID: ${formID}) was not already open, and it could not be opened, so the task could not be run.`);\n                        }\n                    }\n                });\n            };\n        }\n\n        if (!api.actions.runTask) {\n            /**\n             * Runs a form's task. Does not wait for asynchronous execution of task. Use api.actions.runTaskAsync to await.\n             * @param {Object} formID                                            A numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n             * @param {number} taskID                                            A numeric ID that identifies the task.\n             * @param {number} [mode=api.actions.FormRequestBehavior.Normal]     One of the [api.actions.FormRequestBehaviorModes] to use when opening the form.\n             */\n            api.actions.runTask = (formID, taskID, mode = api.actions.FormRequestBehaviorModes.Normal) => {\n                api.actions.runTaskAsync(formID, taskID, mode);\n            }\n        }\n\n        // TODO: Add pointer to api.actions.dvCore.[ActionName].Definition.Settings on root action for easy access in context of each action.\n    });\n})();\n"],"file":"actions.js"}