{"version":3,"sources":["../../src/api/ui.js"],"names":["api","loadExtension","overlayClassName","getOverlayStyle","coordinates","top","left","absoluteRight","absoluteBottom","ControlBindingHelper","isOne","editControlAccessor","events","_isOne","_editControlAccessor","_events","controlMap","Map","form","typeName","nativeEventName","targetAccessor","control","textField","editControl","view","target","comboBox","content","checkboxField","contro","lcheckboxField","internalEventHandlers","handler","utils","runFunction","hasFocus","ui","controlHelper","action","propertySettingName","raw","entries","type","helpers","_helpers","eventName","getEvent","components","push","drivingView","UID","join","actionLinker","ActionID","Type","Settings","propertyLinker","$hash$","customHandler","delay","event","internalEventHandler","get","eventTarget","getEventTarget","timeout","invokeInternalHandler","window","clearTimeout","setTimeout","bindingsRegistry","register","key","getBindingKey","registrationFormID","ViewID","onRegister","isFunction","bind","subscribe","on","onDeregister","unbind","unsubscribe","off","deregister","getValidGap","uiControl","gap","defaultGap","validGap","Number","parseInt","isNaN","parent","createVerticalPanel","zebra","dvPanel","layout","ListLayout","STRETCH","createHorizontalPanel","FlowLayout","CENTER","HORIZONTAL","createStretchPanel","orientation","dvLayout","getMaxSize","sizes","width","Math","max","map","size","height","normalizeSize","normalizedSize","dimensionTranslator","normalizedDimension","undefined","stringValue","toString","percentIndex","indexOf","multiplier","substring","setFormSize","theForm","ensureForm","theSize","dimension","console","log","setFormLocation","location","x","y","setFormSizeAndLocation","checkboxToButtonPair","checkbox","selectedStyle","deselectedStyle","yesLabel","noLabel","buttonWidth","buttonHeight","hostForm","isVisible","booleanControl","ensureCheckbox","currentValue","getValue","setVisible","selectedButtonStyle","ensureStyle","deselectedButtonStyle","buttonPanel","toLowerCase","add","falseButton","dvButton","applyStyle","currentStyle","overrideStyle","setLabel","trueButton","specifiedSize","maxSize","getPreferredSize","applySize","setPreferredSize","vrp","message","error","Error","setComboBoxList","combobox","list","comboBoxControl","ensureComboBox","setList","fieldToComboBox","field","dvComboBox","domInput","util","getWindow","getInput","hAlign","RIGHT","vAlign","definition","Orientation","TOP","emitter","comboBoxToButtons","buttonArray","Array","isArray","cachedList","listItem","button","forEach","buttonGroupHelper","containerPanel","allowedMinValueCount","allowedMaxValueCount","boundPropertyID","initialValue","onSelection","onValueSet","ensureGroupPanel","ensurePanel","toLinker","controlHelpers","lastClickedButton","setValues","buttons","getControlsByTypeName","length","set","_toggleButtonValue","styleButtons","setFormValueFromControl","isSelected","hasValue","label","originalText","styleButton","formHelper","setControlValueFromForm","gridValue","boundPropertyGridValue","value","displayProperties","setText","styleToApply","helper","values","_values","_allowAddValue","_allowRemoveValue","remove","newSelectionValue","buttonValue","addValue","removeValue","valueCount","split","selectedRecord","gridValues","getVal","applyDropShadow","shadowColor","right","bottom","shadowBlur","shadowOffsetX","shadowOffsetY","border","setBorder","Border","targetBorder","getLeft","getTop","getRight","getBottom","paint","g","w","h","d","lineWidth","radius","outline","halfWidth","beginPath","rect","closePath","setColor","color","stroke","shadow","blur","offsetX","offsetY","fillStyle","fillRect","getFieldUIControl","controlID","self","findControl","getButtonUIControl","taskID","formController","formActions","getControlPosition","relativeToPanel","resPosition","getFieldCoordinates","rootPanel","topMVC","position","removeOverlay","overlay","id","element","document","getElementById","parentNode","removeChild","removeAllOverlays","elements","getElementsByClassName","overlayFieldWithElement","elementType","newElement","createElement","style","classList","getCanvas","canvas","parentElement","appendChild","overlayFieldWithDiv","overlayFieldWithVideo","source","controls","autoplay","loop","src","overlayFieldWithIframe","fld","iFrame","t","l","getCoordinatesForPropertyDropDown","formID","getOpenForm","fieldCoordinates","getDefaultForm","exception","getFormFromCurrentExpression","app","dv","exprEng","currexpression","mvc","getLastOpenForm","openForms","last","exc","getActiveForm","active","getDefaultView","getGroupPanelByHeaderText","headerText","formToUse","apiRef","getLayoutItemByName","name","panelToSearch","matchingPanel","searchPanel","panel","kids","p","Name","getStylableControlOrForm","uiControlToStyle","typeOfControl","setControlVisibility","visible","hideControl","showControl","Definition","getStyleFromUID","mergedStyle","mergeStyles","applyDefaultStyle","getDefaultStyle","resetStyles","resetStyle","parentStyle","Styles","linker","cache","styles","allStyles","session","configEntity","ConfigValue","SavedThemes","find","theme","IsCurrent","DefaultStyle","clientProperties","entityType","create","ensureDateTimeTextBox","dateTimeTextBox","dateTimeField","factory","View","ensureKids","container","kidsCollection","flattenControls","moreKids","concat","deepSearch","filter","k","getControlsByLabel","getControlsByID","getControlsOfType","applyBoxShadow","apiForm","apiControl","boxShadow","divShadow","borderRadius","background","pointerEvents","overlayCanvasWithElement","domElement","overflowY","innerHTML","rawCtl","scrollPnl","findScrollPanel","scrollMgr","scrollManager","setElementPos","getAbsolutePosition","formWindow","workarea","baseElement","laidout","e","catchScrolled","controlPos","elementStyle","sx","scrollPnlPos","sy"],"mappings":"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","sourcesContent":["/**\n * Custom Action: Extend api.ui\n * Extends the api.ui namespace with additional helper functions.\n * Dependencies:\n *    api.loadExtension\n *    api.bindingsRegistry.register\n *    api.bindingsRegistry.deregister\n *    api.utils.toLinker\n */\napi.loadExtension(\"api.ui\", () => {\n    const overlayClassName = \"overlayFieldWithElement\";\n\n    const getOverlayStyle = coordinates => {\n        //Absolute position is needed on the main container of html elements in order to overlay the canvas. It also allows anchoring the bottom right coordinates to handle window resizing.\n        return `position:absolute;display:inline-block;resize:both;top:${coordinates.top}px;left:${coordinates.left}px;right:${coordinates.absoluteRight}px;bottom:${coordinates.absoluteBottom}px;`;\n    };\n\n    /**\n     * A helper used to determine if a control is of a given type to access its underlying edit control, and to access event binding components.\n     */\n    class ControlBindingHelper {\n        constructor({ isOne, editControlAccessor, events }) {\n            this._isOne = isOne;\n            this._editControlAccessor = editControlAccessor;\n            this._events = events;\n        }\n\n        /**\n         * Gets a function that returns a boolean value indicating whether the control is of a given type.\n         */\n        get isOne() {\n            return this._isOne;\n        }\n\n        /**\n         * Gets a functon that returns the component edit control of a given type.\n         */\n        get editControlAccessor() {\n            return this._editControlAccessor;\n        }\n\n        /**\n         * Gets a map of binding details and helper functions for the various events that a given control can fire.\n         */\n        get events() {\n            return this._events;\n        }\n    }\n\n    /**\n     * A map of helper functions and event binding configurations for a specific type of control (e.g. TextField, ComboBox).\n     */\n    const controlMap = new Map([\n        [\"Form\", new ControlBindingHelper({\n            isOne: form => form.typeName === \"app.dv.mvc\",\n            editControlAccessor: form => form,\n            events: {\n                \"selectionChanged\": {\n                    nativeEventName: \"selectionChanged\",\n                    targetAccessor: form => form,\n                },\n            }\n        })],\n        [\"TextField\", new ControlBindingHelper({\n            isOne: control => control.textField && (control.textField.typeName === \"zebra.ui.dvTextField\" || control.textField.typeName === \"zebra.ui.dvNumberField\"),\n            editControlAccessor: control => control.textField,\n            events: {\n                \"textUpdated\": {\n                    nativeEventName: \"textUpdated\",\n                    targetAccessor: editControl => editControl.view.target,\n                },\n            },\n        })],\n        [\"DateTimeField\", new ControlBindingHelper({\n            isOne: control => control.typeName === \"zebra.ui.dvDateTimeField\",\n            editControlAccessor: control => control,\n            events: {\n                \"textUpdated\": {\n                    nativeEventName: \"textUpdated\",\n                    targetAccessor: editControl => editControl.view.target,\n                },\n            },\n        })],\n        [\"ComboBox\", new ControlBindingHelper({\n            isOne: control => control.comboBox && control.comboBox.typeName === \"zebra.ui.dvComboBox\",\n            editControlAccessor: control => control.comboBox,\n            events: {\n                \"textUpdated\": {\n                    nativeEventName: \"textUpdated\",\n                    targetAccessor: editControl => editControl.content.textField.view.target,\n                },\n                \"itemSelected\": {\n                    nativeEventName: \"\",\n                    targetAccessor: editControl => editControl,\n                },\n                \"clicked\": {\n                    nativeEventName: \"onClick\",\n                    targetAccessor: editControl => editControl.content.textField,\n                }\n            },\n        })],\n        [\"Button\", new ControlBindingHelper({\n            isOne: control => control.typeName === \"zebra.ui.dvButton\",\n            editControlAccessor: control => control,\n            events: {\n                \"fired\": {\n                    nativeEventName: \"fired\",\n                    targetAccessor: editControl => editControl,\n                },\n            },\n        })],\n        // TODO: Checkbox configuration needs to be verified and/or modified/fully implemented\n        [\"Checkbox\", new ControlBindingHelper({\n            isOne: control => control.checkboxField && contro.lcheckboxField.typeName === \"zebra.ui.dvCheckbox\" ,\n            editControlAccessor: control => control.checkboxField,\n            events: {\n                \"fired\": {\n                    nativeEventName: \"fired\",\n                    targetAccessor: editControl => editControl,\n                },\n            },\n        })],\n    ]);\n\n    /**\n     * A map of event handlers corresponding to a public event name. The corresponding handler is called internally when\n     * the associated bound event fires. It is passed an optional custom handler function that will be called after any\n     * internal housekeeping is done.\n     */\n    const internalEventHandlers = new Map([\n        [\"selectionChanged\", (editControl, handler) => {\n            api.utils.runFunction(handler, null, [ editControl ]);\n        }],\n        [\"textUpdated\", (editControl, handler) => {\n            if (!editControl.hasFocus()) {\n                // Don't do anything if the control doesn't have focus\n                // (further propagation can cause an endless loop if grid cell is updating the field's text)\n                return;\n            }\n\n            // Execute the provided handler, passing it the edit control\n            api.utils.runFunction(handler, null, [ editControl ]);\n        }],\n        [\"itemSelected\", (editControl, handler) => {\n            if (!editControl.hasFocus()) {\n                // Don't do anything if the control doesn't have focus\n                // (further propagation can cause an endless loop if grid cell is updating the field's text)\n                return;\n            }\n\n            // Execute the provided handler, passing it the edit control\n            api.utils.runFunction(handler, null, [ editControl ]);\n        }],\n        [\"clicked\", (editControl, handler) => {\n            api.utils.runFunction(handler, null, [ editControl ]);\n        }],\n        [\"fired\", (editControl, handler) => {\n            api.utils.runFunction(handler, null, [ editControl ]);\n        }],\n    ]);\n\n    if (!api.ui.controlHelper) {\n        /**\n         * A helper object that can be used to bind events to a control.\n         */\n        api.ui.controlHelper = class {\n            /**\n             * Constructs a helper that can be used to bind events to a control.\n             * @param  {object}    control                The control instance.\n             * @param  {object}    form                   The form that hosts the control instance.\n             * @param  {object}    action                 Optionally, the custom action that is using the helper.\n             * @param  {string}    propertySettingName    Optionally, the name of the setting on the action that\n             *                                            identifies the property associated with any bindings.\n             */\n            constructor(control, form, action, propertySettingName) {\n                this.control = control;\n                this.form = form.raw ? form.raw : form;\n                this.propertySettingName = propertySettingName;\n                this.action = action;\n                for (let [type, helpers] of controlMap.entries()) {\n                    if (helpers.isOne(control)) {\n                        this.type = type;\n                        this._helpers = helpers;\n                        this.editControl = helpers.editControlAccessor(this.control);\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Gets the underlying target of a specific event for the control.\n             * @param {string}        eventName        The event name that was previously bound.\n             * @returns {object}                       The underlying target component for the specific control and event.\n             */\n            getEventTarget(eventName) {\n                return this.getEvent(eventName).targetAccessor(this.editControl);\n            }\n\n            /**\n             * Gets the configuration for a specific event that the control fires. This can be used\n             * to map public events to their underlying native events and to access the target\n             * of the event to be bound. Because controls are made up of individual component\n             * controls, the targets for various events may be different internally.\n             * @param {string}        eventName        The event name that is being bound.\n             * @returns {object}                       Details of the specific control's and event's binding.\n             */\n            getEvent(eventName) {\n                const events = this._helpers.events;\n                if (events) {\n                    return events[eventName];\n                }\n                return null;\n            }\n\n            /**\n             * Generates the most unique key possible using the control helper's constructor parameters.\n             * @param {string}        eventName        The event name that is being bound.\n             * @returns {string}                       A key suitable for the binding registry.\n             */\n            getBindingKey(eventName) {\n                const components = [];\n                if (this.form) {\n                    components.push([\"Form\", this.form.drivingView.UID].join(\":\"));\n                }\n                if (this.action) {\n                    const actionLinker = this.action.ActionID;\n                    if (actionLinker) {\n                        components.push([actionLinker.Type, actionLinker.UID].join(\":\"));\n                    }\n                    if (this.propertySettingName && this.action.Settings) {\n                        const propertyLinker = this.action.Settings[this.propertySettingName];\n                        if (propertyLinker && propertyLinker.Type && propertyLinker.UID) {\n                            components.push([propertyLinker.Type, propertyLinker.UID].join(\":\"));\n                        }\n                    }\n                }\n                components.push([\"Control\", this.control.$hash$].join(\":\"));\n                components.push(eventName);\n                return components.join(\"|\");\n            }\n\n            /**\n             * Binds an event handler for the control.\n             * @param {string}        eventName        The event name that was previously bound.\n             * @param {function}      customHandler    The function to be executed whenever the event fires.\n             *                                         When called, it will be passed the bound edit control.\n             * @param {number}        delay            Delay in milliseconds between events before execution. Defaults to 0.\n             * @returns {object}                       The registered binding.\n             */\n            bind(eventName, customHandler, delay = 0) {\n                const event = this.getEvent(eventName);\n                const internalEventHandler = internalEventHandlers.get(eventName);\n                const eventTarget = this.getEventTarget(eventName);\n                let timeout = null;\n                const invokeInternalHandler = () => {\n                    window.clearTimeout(timeout);\n                    timeout = window.setTimeout(() => internalEventHandler(this.editControl, customHandler), delay);\n                };\n                const nativeEventName = event.nativeEventName;\n\n                return api.bindingsRegistry.register({\n                    key: this.getBindingKey(eventName),\n                    registrationFormID: this.form.drivingView.ViewID,\n                    onRegister: () => {\n                        // Bind the actual event handler, and store it for potential unbinding\n                        if (nativeEventName) {\n                            if (api.utils.isFunction(eventTarget.bind)) {\n                                eventTarget.bind(nativeEventName, invokeInternalHandler);\n                            } else if (api.utils.isFunction(eventTarget.subscribe)) {\n                                // Some objects use subscribe/unSubscribe instead of bind/unbind\n                                eventTarget.subscribe(nativeEventName, this.editControl, invokeInternalHandler);\n                            } else if (api.utils.isFunction(eventTarget.on)) {\n                                // Some objects use subscribe/unSubscribe instead of bind/unbind\n                                eventTarget.on(nativeEventName, invokeInternalHandler);\n                            }\n                        } else {\n                            // Some controls only have a single event, so the name is irrelevant and the syntax is different\n                            eventTarget.bind(invokeInternalHandler);\n                        }\n                    },\n                    onDeregister: () => {\n                        // When the registered binding is deregistered, unbind the event handler instance\n                        if (api.utils.isFunction(eventTarget.unbind)) {\n                            eventTarget.unbind(invokeInternalHandler);\n                        } else if (api.utils.isFunction(eventTarget.unsubscribe)) {\n                            // Some objects use subscribe/unSubscribe instead of bind/unbind\n                            eventTarget.unsubscribe(nativeEventName, this.editControl);\n                        } else if (api.utils.isFunction(eventTarget.off)) {\n                            // Some objects use subscribe/unSubscribe instead of bind/unbind\n                            eventTarget.off(nativeEventName, invokeInternalHandler);\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Removes the binding for one of the control's previously bound event handlers.\n             * @param {string}    eventName    The event name that was previously bound.\n             * @returns {object}               The deregistered binding.\n             */\n            unbind(eventName) {\n                // Deregister the binding which will unbind the event handler instance\n                return api.bindingsRegistry.deregister(this.getBindingKey(eventName));\n            }\n        };\n    }\n\n    if (!api.ui.getValidGap) {\n        api.ui.getValidGap = (uiControl, gap, defaultGap = 5) => {\n            let validGap = Number.parseInt(gap);\n            if (isNaN(validGap) || validGap === null) {\n                // Use the control's gap or its parent's if none is specified\n                validGap = uiControl.gap || (uiControl.parent ? uiControl.parent.gap : defaultGap) || defaultGap;\n            }\n        };\n    }\n\n    if (!api.ui.createVerticalPanel) {\n        api.ui.createVerticalPanel = gap => new zebra.ui.dvPanel(new zebra.layout.ListLayout(zebra.layout.STRETCH, gap));\n    }\n\n    if (!api.ui.createHorizontalPanel) {\n        api.ui.createHorizontalPanel = gap => new zebra.ui.dvPanel(new zebra.layout.FlowLayout(zebra.layout.STRETCH, zebra.layout.CENTER, zebra.layout.HORIZONTAL, gap));\n    }\n\n    if (!api.ui.createStretchPanel) {\n        api.ui.createStretchPanel = (orientation, gap) => new zebra.ui.dvPanel(new zebra.layout.dvLayout(orientation, gap));\n    }\n\n    if (!api.ui.getMaxSize) {\n        api.ui.getMaxSize = sizes => {\n            return {\n                width: Math.max(...sizes.map(size => size ? size.width : 0)),\n                height: Math.max(...sizes.map(size => size ? size.height : 0))\n            };\n        };\n    }\n\n    if (!api.ui.normalizeSize) {\n        api.ui.normalizeSize = size => {\n            const normalizedSize = size;\n            const dimensionTranslator = {\n                width: \"innerWidth\",\n                height: \"innerHeight\",\n            };\n            for (let key in normalizedSize) {\n                let normalizedDimension = normalizedSize[key];\n                if (normalizedDimension !== null && normalizedDimension !== undefined) {\n                    const stringValue = normalizedDimension.toString();\n                    const percentIndex = stringValue.indexOf(\"%\");\n                    if (percentIndex >= 0) {\n                        const multiplier = (Number.parseInt(stringValue.substring(0, percentIndex)) || 0) / 100;\n                        normalizedDimension = multiplier * window[dimensionTranslator[key]];\n                    } else {\n                        normalizedDimension = Number.parseInt(normalizedDimension);\n                    }\n                    normalizedSize[key] = normalizedDimension;\n                }\n            }\n            return normalizedSize;\n        };\n    }\n\n    if (!api.ui.setFormSize) {\n        api.ui.setFormSize = (form, size) => {\n            const theForm = api.ui.ensureForm(form);\n            if (theForm) {\n                const theSize = api.ui.normalizeSize(size);\n                for (let key in theSize) {\n                    let dimension = theSize[key];\n                    if (dimension !== null && dimension !== undefined) {\n                        form.window[key] = dimension;\n                    }\n                }\n            } else {\n                console.log(\"Form could not be found, so setFormSize could not be executed.\");\n            }\n        };\n    }\n\n    if (!api.ui.setFormLocation) {\n        api.ui.setFormLocation = (form, location) => {\n            const theForm = api.ui.ensureForm(form);\n            if (theForm) {\n                form.window.left = location.left || location.x;\n                form.window.top = location.top || location.y;\n            } else {\n                console.log(\"Form could not be found, so setFormLocation could not be executed.\");\n            }\n        };\n    }\n\n    if (api.ui.setFormSizeAndLocation) {\n        api.ui.setFormSizeAndLocation = (form, coordinates) => {\n            api.ui.setFormSize(form, coordinates);\n            api.ui.setFormLocation(form, coordinates);\n        };\n    }\n\n    if (!api.ui.checkboxToButtonPair) {\n        api.ui.checkboxToButtonPair = ({\n            checkbox,\n            form,\n            selectedStyle,\n            deselectedStyle,\n            yesLabel = \"Yes\",\n            noLabel = \"No\",\n            layout = \"horizontal\",\n            gap = null,\n            buttonWidth = null,\n            buttonHeight = null,\n        }) => {\n            const hostForm = api.ui.ensureForm(form);\n            if (hostForm && hostForm.isVisible) {\n                const booleanControl = api.ui.ensureCheckbox(checkbox, hostForm);\n\n                if (booleanControl) {\n                    const currentValue = booleanControl.checkboxField.getValue();\n\n                    // Hide any existing checkbox\n                    if (booleanControl.checkboxField) {\n                        booleanControl.checkboxField.setVisible(false);\n                    }\n\n                    //Set up styles\n                    const selectedButtonStyle = api.ui.ensureStyle(selectedStyle);\n                    const deselectedButtonStyle = api.ui.ensureStyle(deselectedStyle);\n\n                    if (selectedButtonStyle && deselectedButtonStyle) {\n                        // Create a container panel and add buttons in place of checkbox\n                        if (!booleanControl.buttonPanel) {\n                            booleanControl.buttonPanel = layout.toLowerCase() === \"horizontal\" ? api.ui.createHorizontalPanel(gap) : api.ui.createVerticalPanel(gap);\n                            booleanControl.add(booleanControl.buttonPanel);\n                        }\n                        let falseButton = booleanControl.falseButton;\n                        if (!falseButton) {\n                            falseButton = new zebra.ui.dvButton();\n                            booleanControl.buttonPanel.add(falseButton);\n                        }\n                        falseButton.applyStyle(booleanControl.currentStyle);\n                        falseButton.overrideStyle = currentValue === true ? deselectedButtonStyle : currentValue === false ? selectedButtonStyle : booleanControl.currentStyle;\n                        api.ui.applyStyle(form, falseButton, falseButton.overrideStyle);\n                        falseButton.setLabel(noLabel);\n                        let trueButton = booleanControl.trueButton;\n                        if (!trueButton) {\n                            trueButton = new zebra.ui.dvButton();\n                            booleanControl.buttonPanel.add(trueButton);\n                        }\n                        trueButton.applyStyle(booleanControl.currentStyle);\n                        trueButton.overrideStyle = currentValue === true ? deselectedButtonStyle : currentValue === false ? selectedButtonStyle : booleanControl.currentStyle;\n                        api.ui.applyStyle(form, trueButton, trueButton.overrideStyle);\n                        trueButton.setLabel(yesLabel);\n                        window.setTimeout(() => {\n                            if (falseButton && trueButton) {\n                                const specifiedSize = {\n                                    width: Number.parseInt(buttonWidth),\n                                    height: Number.parseInt(buttonHeight)\n                                };\n                                const maxSize = api.ui.getMaxSize([trueButton.getPreferredSize(), falseButton.getPreferredSize()]);\n                                const applySize = {\n                                    width: specifiedSize.width || maxSize.width,\n                                    height: specifiedSize.height || maxSize.height\n                                };\n                                falseButton.setPreferredSize(applySize.width, applySize.height);\n                                falseButton.vrp();\n                                trueButton.setPreferredSize(applySize.width, applySize.height);\n                                trueButton.vrp();\n                            }\n                        }, 11);\n                    } else {\n                        const message = \"You must supply styles for selected and deselected button states. See console for more details.\";\n                        console.error(message, \"selectedStyle:\", selectedStyle, \"deselectedStyle:\", deselectedStyle);\n                        throw new Error(message);\n                    }\n                } else {\n                    const message = \"Could not find checkbox control. See console for more details.\";\n                    console.error(message, \"checkbox:\", checkbox);\n                    throw new Error(message);\n                }\n                return booleanControl;\n            } else {\n                console.log(\"Form is not visible, so checkboxToButtonPair could not be executed.\");\n                return null;\n            }\n        };\n    }\n\n    if (!api.ui.setComboBoxList) {\n        api.ui.setComboBoxList = (combobox, form, list) => {\n            const hostForm = api.ui.ensureForm(form);\n            if (hostForm && hostForm.isVisible) {\n                const comboBoxControl = api.ui.ensureComboBox(combobox.comboBox || combobox, hostForm);\n                if (comboBoxControl) {\n                    comboBoxControl.setList(list || []);\n                }\n            }\n        };\n    }\n\n    if (!api.ui.fieldToComboBox) {\n        api.ui.fieldToComboBox = (field, form, list = []) => {\n            const hostForm = api.ui.ensureForm(form);\n            if (hostForm && hostForm.isVisible) {\n                if (field.raw) {\n                    field = field.raw;\n                }\n                const comboBox = new zebra.ui.dvComboBox(list || [], true);\n                comboBox.domInput = zebra.util.getWindow(form).getInput(\"combo\");\n                comboBox.hAlign = zebra.layout.RIGHT;\n                comboBox.vAlign = field.definition.Orientation === 1 ? zebra.layout.STRETCH : zebra.layout.TOP;\n                field.textField.setVisible(false);\n                field.comboBox = comboBox;\n                // Pass through event handlers between the hidden text field and new combobox\n                field.comboBox.emitter = field.textField.emitter;\n                field.add(comboBox);\n                comboBox.applyStyle(field.currentStyle);\n            }\n        };\n    }\n\n    if (!api.ui.comboBoxToButtons) {\n        api.ui.comboBoxToButtons = ({\n            combobox,\n            form,\n            selectedStyle,\n            deselectedStyle,\n            layout = \"vertical\",\n            gap = null,\n            buttonWidth = null,\n            buttonHeight = null,\n        }) => {\n            const hostForm = api.ui.ensureForm(form);\n            if (hostForm && hostForm.isVisible) {\n                const comboBoxControl = api.ui.ensureComboBox(combobox, hostForm);\n\n                if (comboBoxControl) {\n                    const currentValue = comboBoxControl.comboBox.getValue();\n\n                    // Hide existing combobox\n                    comboBoxControl.comboBox.setVisible(false);\n\n                    // Set up styles\n                    const selectedButtonStyle = api.ui.ensureStyle(selectedStyle);\n                    const deselectedButtonStyle = api.ui.ensureStyle(deselectedStyle);\n\n                    if (selectedButtonStyle && deselectedButtonStyle) {\n                        // Create a container panel and add buttons in place of checkbox\n                        if (!comboBoxControl.buttonPanel) {\n                            comboBoxControl.buttonPanel = layout.toLowerCase() === \"horizontal\" ? api.ui.createHorizontalPanel(gap) : api.ui.createVerticalPanel(gap);\n                            comboBoxControl.add(comboBoxControl.buttonPanel);\n                        }\n                        if (!comboBoxControl.buttonArray && Array.isArray(comboBoxControl.comboBox.cachedList)) {\n                            comboBoxControl.buttonArray = comboBoxControl.comboBox.cachedList.map(listItem => {\n                                if (listItem) {\n                                    const button = new zebra.ui.dvButton();\n                                    button.applyStyle(comboBoxControl.currentStyle);\n                                    button.overrideStyle = currentValue === listItem ? selectedButtonStyle : deselectedButtonStyle;\n                                    api.ui.applyStyle(form, button, button.overrideStyle);\n                                    button.setLabel(listItem);\n                                    comboBoxControl.buttonPanel.add(button);\n                                    return button;\n                                }\n                            });\n                        }\n                        window.setTimeout(() => {\n                            if (comboBoxControl && comboBoxControl.buttonArray) {\n                                const specifiedSize = {\n                                    width: Number.parseInt(buttonWidth),\n                                    height: Number.parseInt(buttonHeight)\n                                };\n                                const maxSize = api.ui.getMaxSize(comboBoxControl.buttonArray.map(button => button ? button.getPreferredSize() : null ));\n                                const applySize = {\n                                    width: specifiedSize.width || maxSize.width,\n                                    height: specifiedSize.height || maxSize.height\n                                };\n                                comboBoxControl.buttonArray.forEach(button => {\n                                    if (button) {\n                                        button.setPreferredSize(applySize.width, applySize.height);\n                                        button.vrp();\n                                    }\n                                });\n                            }\n                        }, 11);\n                    } else {\n                        const message = \"You must supply styles for selected and deselected button states. See console for more details.\";\n                        console.error(message, \"selectedStyle:\", selectedStyle, \"deselectedStyle:\", deselectedStyle);\n                        throw new Error(message);\n                    }\n                } else {\n                    const message = \"Could not find combobox control. See console for more details.\";\n                    console.error(message, \"combobox:\", combobox);\n                    throw new Error(message);\n                }\n\n                return comboBoxControl;\n            } else {\n                console.log(\"Form is not visible, so comboBoxToButtons could not be executed.\");\n                return null;\n            }\n        };\n    }\n\n    if (!api.ui.buttonGroupHelper) {\n        api.ui.buttonGroupHelper = class {\n            constructor({\n                form,\n                containerPanel,\n                selectedStyle,\n                deselectedStyle,\n                allowedMinValueCount = 0,\n                allowedMaxValueCount,\n                action,\n                propertySettingName,\n                boundPropertyID,\n                initialValue,\n                onSelection,\n                onValueSet,\n            }) {\n                this.form = api.ui.ensureForm(form);\n                if (this.form.isVisible) {\n                    this.propertySettingName = propertySettingName;\n                    this.action = action;\n                    // Allow use of a Group Panel or a regular one as a button container\n                    // TODO: Support any valid container?\n                    this.containerPanel = api.ui.ensureGroupPanel(containerPanel, this.form) || api.ui.ensurePanel(containerPanel);\n                    this.selectedStyle = api.ui.ensureStyle(selectedStyle);\n                    this.deselectedStyle = api.ui.ensureStyle(deselectedStyle);\n                    // Allow the specified min value count or none if not specified\n                    this.allowedMinValueCount = Number.parseInt(allowedMinValueCount) || 0;\n                    this.boundPropertyID = api.utils.toLinker(boundPropertyID);\n                    this.controlHelpers = new Map();\n                    this.lastClickedButton = null;\n                    this.setValues(initialValue);\n\n                    if (this.selectedStyle && this.deselectedStyle) {\n                        if (this.containerPanel) {\n                            // Wire up each button contained by the group panel to a shared event handler\n                            // TODO: Instead of a deep search, look specifically for components that contain a button at the first appropriate child level of the container\n                            const buttons = api.ui.getControlsByTypeName(this.containerPanel, \"zebra.ui.dvButton\", true);\n                            if (buttons) {\n                                // Allow the specified max value count or count of all possible values if not specified\n                                this.allowedMaxValueCount = Number.parseInt(allowedMaxValueCount) || buttons.length;\n                                buttons.forEach(button => {\n                                    // Create a helper for each button and map by unique ID\n                                    const controlHelper = new api.ui.controlHelper(button, this.form, action, propertySettingName);\n                                    this.controlHelpers.set(button.$hash$, controlHelper);\n                                    // Bind each button's fired event to a shared handler\n                                    controlHelper.bind(\"fired\", control => {\n                                        this._toggleButtonValue(control);\n                                        this.styleButtons();\n                                        api.utils.runFunction(this.setFormValueFromControl, null, [ this.form ]);\n                                        api.utils.runFunction(onSelection, null, [ this ]);\n                                    });\n                                    controlHelper.isSelected = () => this.hasValue(button.label.originalText);\n                                    // Style button according to value\n                                    this.styleButton(button);\n                                });\n                                if (this.boundPropertyID) {\n                                    // Create a helper for the form since we need to know when a bound property value may have changed due to row selection\n                                    const formHelper = new api.ui.controlHelper(this.form, this.form, action, propertySettingName);\n                                    this.formHelper = formHelper;\n                                    this.setControlValueFromForm = () => {\n                                        // Update the button group's value with the bound field's value from the selected record\n                                        const gridValue = this.boundPropertyGridValue;\n                                        let value = gridValue && gridValue.getValue ? gridValue.getValue() : null;\n                                        if (value && typeof value !== \"string\" && value.toString) {\n                                            value = value.toString();\n                                        }\n                                        this.value = value;\n                                        api.utils.runFunction(onValueSet, null, [ this ]);\n                                    };\n                                    this.setFormValueFromControl = () => {\n                                        // Assign the value to the bound property\n                                        const gridValue = this.boundPropertyGridValue;\n                                        if (gridValue) {\n                                            // gridValue.setValue(this.value);\n                                            gridValue.displayProperties.setText(this.value);\n                                        }\n                                    };\n                                    // Bind future value changes\n                                    formHelper.bind(\"selectionChanged\", this.setControlValueFromForm);\n                                    // Set current value\n                                    this.setControlValueFromForm(this.form);\n                                }\n                            } else {\n                                const message = \"There are no buttons inside Panel.\";\n                                console.error(message, containerPanel);\n                                throw new Error(message);\n                            }\n                        } else {\n                            const message = \"Could not find Panel.\";\n                            console.error(message, \"containerPanel:\", containerPanel);\n                            throw new Error(message);\n                        }\n                    } else {\n                        const message = \"You must supply styles for selected and deselected button states. See console for more details.\";\n                        console.error(message, \"selectedStyle:\", selectedStyle, \"deselectedStyle:\", deselectedStyle);\n                        throw new Error(message);\n                    }\n                } else {\n                    console.log(\"Could not create buttonGroupHelper since form is not visible.\");\n                }\n            }\n\n            styleButton(button) {\n                const styleToApply = this.hasValue(button.label.originalText) ? this.selectedStyle : this.deselectedStyle;\n                button.overrideStyle = styleToApply;\n                api.ui.applyStyle(this.form, button, styleToApply);\n            }\n\n            styleButtons() {\n                this.controlHelpers.forEach(helper => {\n                    this.styleButton(helper.control);\n                });\n            }\n\n            setValues(values) {\n                if (Array.isArray(values)) {\n                    this._values = values;\n                } else if (values !== null && values !== undefined) {\n                    this._values = [values];\n                } else {\n                    this._values = [];\n                }\n            }\n\n            addValue(value) {\n                if (this._allowAddValue(value)) {\n                    this._values.push(value);\n                }\n            }\n\n            removeValue(value) {\n                if (this._allowRemoveValue(value)) {\n                    this._values.remove(value);\n                }\n            }\n\n            hasValue(value) {\n                return Array.isArray(this._values) ?\n                    this._values.indexOf(value) > -1 :\n                    false;\n            }\n\n            get valueCount() {\n                return Array.isArray(this._values) ?\n                    this._values.length :\n                    0;\n            }\n\n            set value(values) {\n                // Split comma-separated values into an array\n                if (values && typeof values === \"string\") {\n                    values = values.split(\",\");\n                }\n                this.setValues(values);\n                this.styleButtons();\n            }\n\n            get value() {\n                // Return values as an array (limit as specified)\n                return Array.isArray(this._values) ?\n                    this._values.join(\",\") :\n                    null;\n            }\n\n            get values() {\n                return this._values || [];\n            }\n\n            get boundPropertyGridValue() {\n                if (this.boundPropertyID && this.form && this.form.selectedRecord && this.form.selectedRecord.gridValues) {\n                    return this.form.selectedRecord.gridValues.getVal(this.boundPropertyID);\n                } else {\n                    return null;\n                }\n            }\n\n            _toggleButtonValue(button) {\n                this.lastClickedButton = button;\n                const controlHelper = this.controlHelpers.get(button.$hash$);\n                if (controlHelper) {\n                    // Get the toggled boolean value that indicates whether the button is currently selected\n                    const newSelectionValue = !controlHelper.isSelected();\n                    const buttonValue = button.label.originalText;\n                    if (this.allowedMaxValueCount <= 1) {\n                        // Replace value if only one is allowed at a time\n                        if (newSelectionValue === true) {\n                            this.value = buttonValue;\n                        } else if (newSelectionValue === false && this.allowedMinValueCount < 1) {\n                            // Allow clearing value if no values are required\n                            this.value = null;\n                        }\n                    } else {\n                        // Update the underlying values array with the button's value\n                        if (newSelectionValue === true) {\n                            this.addValue(buttonValue);\n                        } else if (newSelectionValue === false) {\n                            this.removeValue(buttonValue);\n                        }\n                    }\n                } else {\n                    console.error(\"Could not find control helper for button \", button);\n                }\n            }\n\n            _allowAddValue(value) {\n                return this.valueCount + (this.hasValue(value) ? 0 : 1) <= this.allowedMaxValueCount;\n            }\n\n            _allowRemoveValue(value) {\n                return this.valueCount - (this.hasValue(value) ? 1 : 0) >= this.allowedMinValueCount;\n            }\n        };\n    }\n\n    if (!api.ui.applyDropShadow) {\n        api.ui.applyDropShadow = ({ uiControl, shadowColor = \"#888888\", left = 0, top = 0, right = 5, bottom = 5, shadowBlur = 10, shadowOffsetX = 5, shadowOffsetY = 5 }) => {\n            if (!uiControl.border) {\n                uiControl.setBorder(new zebra.ui.Border('transparent', 1));\n            }\n            const targetBorder = uiControl.border;\n\n            targetBorder.getLeft = () => Number.parseInt(left) || 0;\n            targetBorder.getTop = () => Number.parseInt(top) || 0;\n            targetBorder.getRight = () => Number.parseInt(right) || 5;\n            targetBorder.getBottom = () => Number.parseInt(bottom) || 5;\n\n            targetBorder.paint = function (g, x, y, w, h, d) {\n                const lineWidth = g.lineWidth;\n                g.lineWidth = this.width;\n\n                if (this.radius > 0) {\n                    this.outline(g, x, y, w, h, d);\n                }\n                else {\n                    const halfWidth = this.width / 2;\n                    g.beginPath();\n                    g.rect(x + halfWidth, y + halfWidth, w - this.width, h - this.width);\n                    g.closePath();\n                }\n\n                g.setColor(this.color);\n                g.lineWidth = this.width;\n                g.stroke();\n                g.lineWidth = lineWidth;\n\n                if (this.shadow) {\n                    g.shadowColor = this.shadow.color || shadowColor;\n                    g.shadowBlur = this.shadow.blur || Number.parseInt(shadowBlur) || 10;\n                    g.shadowOffsetX = this.shadow.offsetX || Number.parseInt(shadowOffsetX) || 5;\n                    g.shadowOffsetY = this.shadow.offsetY || Number.parseInt(shadowOffsetY) || 5;\n\n                    g.fillStyle = \"white\";\n                    // TODO: Clean up magic numbers\n                    g.fillRect(5 + this.width, 5 + this.width, w - ((6 * 2) + this.getRight()), h - ((6 * 2) + this.getBottom()));\n\n                    // Reset shadow attributes so text label is not shadowed\n                    g.shadowBlur = 0;\n                    g.shadowColor = \"black\";\n                    g.shadowOffsetX = 0;\n                    g.shadowOffsetY = 0;\n                }\n            };\n            targetBorder.shadow = {};\n        };\n    }\n\n    if (!api.ui.getFieldUIControl) {\n        // Returns the uiControl object for the specified property UID.\n        /*\n        * getFieldUIControl\n        *   controlID: The name of the control or UID (string or linker) of the control's bound property to retrieve.\n        *   form: The Form object containing a formController to use.\n        *\n        * Returns the field's UIControl drawn on the specified view.\n        */\n        api.ui.getFieldUIControl = (controlID, form) => {\n            // If form is not specified, use the current form.\n            if (form === null || form === undefined) {\n                form = self().raw;\n            } else {\n                form = api.ui.ensureForm(form);\n            }\n\n            if (form && form.isVisible) {\n                let field = form.findControl(controlID) || form.findControl(api.utils.toLinker(controlID));\n                if (field) {\n                    if (field.raw) {\n                        return field.raw;\n                    }\n                    if (field[\"$hash$\"]) {\n                        return field;\n                    }\n                } else {\n                    console.log(\"No field UI Control was found for getFieldUIControl('\", controlID, \"'). Be sure the field is bound to a form control.\");\n                    console.log(controlID);\n                    return null;\n                }\n            } else {\n                console.log(\"No form specified and no 'current form'...getFieldUIControl('\", controlID, \"'), or form is hidden.\");\n                console.log(controlID);\n                return null;\n            }\n        };\n    }\n\n    if (!api.ui.getButtonUIControl) {\n        api.ui.getButtonUIControl = (taskID, form) => {\n            // If form is not specified, use the current form.\n            if (form === null || form === undefined) {\n                form = self().raw;\n            }\n\n            if (form !== null) {\n                // Get the specified button using its ID from the formController (which contains all of the UI Controls).\n                const button = form.formController.formActions.getVal(taskID);\n\n                // Get the uiControl for the button.\n                if (button && button.uiControl && Array.isArray(button.uiControl) && button.uiControl.length) {\n                    return button.uiControl[0];\n                } else {\n                    console.log(\"No button UI Control was found for getButtonUIControl('\", taskID, \"'). Be sure the button is bound to a form task.\");\n                    console.log(taskID);\n                    return null;\n                }\n            } else {\n                console.log(\"No form specified and no 'current form'...getButtonUIControl('\", taskID, \"').\");\n                console.log(taskID);\n                return null;\n            }\n        };\n    }\n\n    if (!api.ui.getControlPosition) {\n        /*\n        * getControlTopLeftInSection\n        *   uiControl: The target uiControl to locate.\n        *   relativeToPanel: The parent panel to which the relative left and top are measured. Usually the main layout panel of the formControler (mvc.formController.uiControl).\n        *\n        * Returns the position of the specified uiControl on the form layout relative to the specified parent panel..PW\n        */\n        api.ui.getControlPosition = (uiControl, relativeToPanel) => {\n            // Create the result position object.\n            var resPosition = { left: 0, top: 0 };\n\n            // Verify the uiControl is not null.\n            if (uiControl !== null) {\n                // Recursively search the parent panels and track the left and top values.\n                while (uiControl.parent !== null && uiControl !== relativeToPanel) {\n                    resPosition.top += uiControl.y;\n                    resPosition.left += uiControl.x;\n                    uiControl = uiControl.parent;\n                }\n            }\n\n            // Return the resulting position.\n            return resPosition;\n        };\n    }\n\n    if (!api.ui.getFieldCoordinates) {\n        api.ui.getFieldCoordinates = (controlID, form) => {\n            // Get the property UI Control object\n            const field = api.ui.getFieldUIControl(controlID, form);\n            if (field) {\n                // Store the root panel for the form (containing the entire form layout).\n                const rootPanel = form.topMVC;\n                // Get the UI Control's position and size.\n                const position = api.ui.getControlPosition(field, rootPanel);\n                if (position) {\n                    const coordinates = {\n                        top: position.top + field.top,\n                        left: position.left + field.left,\n                        width: field.width - (field.left + field.right),\n                        height: field.height - (field.top + field.bottom),\n                        absoluteRight: field.right,\n                        absoluteBottom: field.bottom\n                    };\n                    return coordinates;\n                } else {\n                    console.log(\"getFieldCoordinates: Unable to get control position.\");\n                }\n            } else {\n            console.log(\"getFieldCoordinates: Unabled to find form field for property UID: \", controlID);\n            }\n            return null;\n        };\n    }\n\n    if (!api.ui.removeOverlay) {\n        /**\n         * Removes a DOM element.\n         * @param {string|object}    overlay    Either the string identifier of the DOM element or the object itself.\n         */\n        api.ui.removeOverlay = overlay => {\n            let id;\n            if (typeof overlay === \"string\") {\n                id = overlay;\n            } else if (typeof overlay === \"object\") {\n                id = overlay.id;\n            }\n            const element = document.getElementById(id);\n            if (element) {\n                element.parentNode.removeChild(element);\n            }\n        };\n    }\n\n    if (!api.ui.removeAllOverlays) {\n        /**\n         * Removes all DOM elements that have been overlaid using one of the api.ui.overlay helper functions.\n         */\n        api.ui.removeAllOverlays = () => {\n            const elements = document.getElementsByClassName(overlayClassName);\n            if (elements) {\n                [...elements].forEach(element => api.ui.removeOverlay(element));\n            }\n        };\n    }\n\n    if (!api.ui.overlayFieldWithElement) {\n        /*\n        * Overlays the specified field on the specified form with a new DOM element.\n        * @param {string|object}    controlID      The name of the control or UID (string or linker) of the control's bound property to retrieve.\n        * @param {object}           form           The form on which the property is hosted.\n        * @param {string}           id             An identifier that the element will be tagged with.\n        * @param {string[div]}      elementType    The type of DOM element to created. Defaults to div.\n        * @returns {DOMElement}                    The new element for additional modification.\n        */\n        api.ui.overlayFieldWithElement = (controlID, form, id, elementType = \"div\") => {\n            const coordinates = api.ui.getFieldCoordinates(controlID, form);\n            if (coordinates) {\n                // Create a new element.\n                const newElement = document.createElement(elementType);\n                newElement.id = id;\n                newElement.style = getOverlayStyle(coordinates);\n\n                // Add a class that allows easy identification of overlaid items\n                newElement.classList.add(overlayClassName);\n\n                //Add the element to the html element of the specified form.\n                form.formController.uiControl.getCanvas().canvas.parentElement.appendChild(newElement);\n\n                // Return the element for additional use.\n                return newElement;\n            }\n            return null;    // Return null if unable to overlay the element.\n        };\n    }\n\n    if (!api.ui.overlayFieldWithDiv) {\n        api.ui.overlayFieldWithDiv = (controlID, form, id) => {\n            return api.ui.overlayFieldWithElement(controlID, form, id);\n        };\n    }\n\n    if (!api.ui.overlayFieldWithVideo) {\n        api.ui.overlayFieldWithVideo = (controlID, form, id, source, controls = true, autoplay = true, loop = true) => {\n            const newElement = api.ui.overlayFieldWithElement(controlID, form, id, \"video\");\n            newElement.src = source;\n            newElement.controls = controls;\n            newElement.autoplay = autoplay;\n            newElement.loop = loop;\n            return newElement;\n        };\n    }\n\n    if (!api.ui.overlayFieldWithIframe) {\n        /*\n        * Overlays the specified field on the specified form with a new <iFrame> tag.\n        * Returns the new <iFrame> tag object for additional modification.\n        */\n        api.ui.overlayFieldWithIframe = (controlID, form) => {\n            // Get the property UI Control object.\n            var fld = api.ui.getFieldUIControl(controlID, form);\n            if (fld !== null) {\n                // Store the root panel for the form (containing the entire form layout).\n                var rootPanel = form.formController.uiControl;\n\n                // Get the UI Controls position and size.\n                var position = api.ui.getControlPosition(fld, rootPanel);\n                if (position !== null) {\n                    // Create a new iFrame object.\n                    var iFrame = document.createElement(\"iframe\");\n                    var t = position.top + fld.top;\n                    var l = position.left + fld.left;\n                    var w = fld.width - (fld.left + fld.right);\n                    var h = fld.height - (fld.top + fld.bottom);\n\n                    //Absolute position is needed on the main container of html elements in order to overlay the canvas.\n                    iFrame.style=`position:absolute;background-color:#ffffff;display:inline-block;padding-bottom:30px;border:none;top:${t}px;left:${l}px;width:${w}px;height:${h}px;`;\n\n                    //Add the iFrame to the html element of the specified form.\n                    form.window.canvas.canvas.parentElement.appendChild(iFrame);\n\n                    return iFrame; // Return the iFrame for additional use.\n                } else {\n                    console.log(\"overlayFieldWithIframe: Unable to get control position.\");\n                }\n            } else {\n                console.log(\"Unable to find form field for property UID: \" + controlID);\n            }\n            return null;    // Return null if unable to overlay the iFrame.\n        };\n    }\n\n    if (!api.ui.getCoordinatesForPropertyDropDown) {\n        /**\n         * Gets a position where a drop-down can be placed directly under a control bound to a property on a form.\n         * @param {Object} formID        A numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n         * @param {Object} controlID     The name of the control or UID (string or linker) of the control's bound property to retrieve.\n         * @returns {Object}             Coordinates { top, left, width, height } directly under the field's control.\n         */\n        api.ui.getCoordinatesForPropertyDropDown = (formID, controlID) => {\n            // Get the form (it should already be open)\n            const form = api.utils.getOpenForm(formID);\n            // Get the position of the field bound to the property\n            const fieldCoordinates = api.ui.getFieldCoordinates(controlID, form);\n            fieldCoordinates.top += fieldCoordinates.height;\n            return fieldCoordinates;\n        };\n    }\n\n    if (!api.ui.getDefaultForm) {\n        // TODO: When implementing this in the core code, note that current returns null if a designer is open;\n        //       therefore, we may want to hold a reference to the most recently active view and return that\n        //       prior to returning last() which is always the most recently opened view sorted by original\n        //       instantiation time, not activation time...JH\n        /*\n        * Returns the active form if there is one, starting from the context of the current expression, if any; otherwise returns the one that was last instantiated.\n        */\n        api.ui.getDefaultForm = () => {\n            let form = null;\n            try {\n                form = self();\n                if (!form || !form.formController) {\n                    form = null;\n                }\n            } catch (exception) { }\n            if (!form) {\n                const getFormFromCurrentExpression = () => {\n                    if (app.dv.helpers.exprEng.currexpression) {\n                        return app.dv.helpers.exprEng.currexpression.mvc;\n                    } else {\n                        return null;\n                    }\n                };\n                const getLastOpenForm = () => {\n                    try {\n                        return api.openForms.last().raw;\n                    } catch (exc) {}\n                };\n                const getActiveForm = () => {\n                    try {\n                        return api.openForms.active.raw;\n                    } catch(exc) {}\n                };\n                form = getFormFromCurrentExpression() || getActiveForm() || getLastOpenForm();\n            }\n            return api.ui.ensureForm(form);\n        };\n    }\n\n    if (!api.ui.getDefaultView) {\n        // Alias View -> Form\n        api.ui.getDefaultView = api.ui.getDefaultForm;\n    }\n\n    if (!api.ui.getGroupPanelByHeaderText) {\n        /**\n         * Search for a Group Panel by its header text. Searches recurseivly on the form.\n         * @param {Text} headerText                        The exact Header Text of the panel to find.\n         * @param {Object} form                            The API reference to a form (MVC). Use api.openForms.active for the current form.\n         * @returns {Panel}                                The matching panel object, if any.\n         */\n        api.ui.getGroupPanelByHeaderText = (headerText, form) => {\n            const formToUse = form.raw ? form : form.apiRef;\n            if (formToUse && formToUse.raw && formToUse.raw.formController) {\n                return api.ui.getLayoutItemByName(headerText, formToUse.raw.formController.uiControl);\n            } else {\n                return null;\n            }\n        };\n    }\n\n    if (!api.ui.getLayoutItemByName) {\n        api.ui.getLayoutItemByName = (name, panelToSearch) => {\n            var matchingPanel = null;\n            const searchPanel = panel => {\n                if (matchingPanel != null) {\n                    return; // Stop seaching, we found it..PW\n                }\n\n                // Include the panel itself in the search since we might be starting somewhere inside the top-level panel\n                panel.kids.forEach(function(p) {\n                    if (p.definition && p.definition.Name === name) {\n                        //We have a match, return the panel..PW\n                        matchingPanel = p;\n                    } else {\n                        // Keep searching..PW\n                        searchPanel(p);\n                    }\n                });\n            };\n\n            searchPanel(panelToSearch); //Begin seraching..PW\n            return matchingPanel;\n        };\n    }\n\n    if (!api.ui.getStylableControlOrForm) {\n        /**\n         * Get a UI control (or form if control is nothing) that has styles and applyStyle method from an identifier.\n         * @param   {object}        form            The API reference to an open form (MVC).\n         * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n         * @returns {type}                          A component that can be styled.\n         */\n        api.ui.getStylableControlOrForm = (form, control) => {\n            let uiControlToStyle = control;\n            if (!control) {\n                // If no control or ID was passed, assume we're styling the form, and get its stylable component\n                uiControlToStyle = form.formController ? form.formController.uiControl : null;\n            } else if (control.uiControl) {\n                uiControlToStyle = control.uiControl;\n            } else if (!control.currentStyle) {\n                // Get the underlying stylable component by a control's ID if that's what was passed in\n                const typeOfControl = typeof control;\n                if (typeOfControl === \"number\") {\n                    // Numeric ID is a button\n                    uiControlToStyle = api.ui.getButtonUIControl(control, form);\n                } else if (typeOfControl === \"string\" || typeOfControl === \"object\") {\n                    // String/UID is a field\n                    uiControlToStyle = api.ui.getFieldUIControl(control, form);\n                }\n            }\n            return uiControlToStyle;\n        };\n    }\n\n    if (!api.ui.setControlVisibility) {\n        /**\n         * Shows or hides a control.\n         * @param   {object}        form            The API reference to an open form (MVC).\n         * @param   {object|number} control         The control or its ID (relative to form) that should be manipulated.\n         * @param   {boolean}       visible         Pass true to show; false to hide.\n         * @returns {type}                          A component that can be hidden.\n         */\n        api.ui.setControlVisibility = (form, control, visible) => {\n            const uiControl = api.ui.getStylableControlOrForm(form, control);\n            if (uiControl && uiControl.setVisible) {\n                return uiControl.setVisible(visible);\n            }\n            return null;\n        };\n    }\n\n    if (!api.ui.hideControl) {\n        /**\n         * Hides a control.\n         * @param   {object}        form            The API reference to an open form (MVC).\n         * @param   {object|number} control         The control or its ID (relative to form) that should be manipulated.\n         * @returns {type}                          A component that can be hidden.\n         */\n        api.ui.hideControl = (form, control) => {\n            return api.ui.setControlVisibility(form, control, false);\n        };\n    }\n\n    if (!api.ui.showControl) {\n        /**\n         * Shows a control.\n         * @param   {object}        form            The API reference to an open form (MVC).\n         * @param   {object|number} control         The control or its ID (relative to form) that should be manipulated.\n         * @returns {type}                          A component that can be hidden.\n         */\n        api.ui.showControl = (form, control) => {\n            return api.ui.setControlVisibility(form, control, true);\n        };\n    }\n\n    if (!api.ui.applyStyle) {\n        /**\n         * Apply a style to a form or control, and refresh its appearance.\n         * @param   {object}        form            The API reference to an open form (MVC).\n         * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n         * @param   {object|string} style           The style or its UID that should be applied.\n         */\n        api.ui.applyStyle = (form, control, style) => {\n            if (typeof style === \"string\" || (typeof style === \"object\" && !style.Definition)) {\n                // Get a style reference by its UID if that's what was passed\n                style = api.ui.getStyleFromUID(style);\n            }\n            const uiControlToStyle = api.ui.getStylableControlOrForm(form, control);\n            if (uiControlToStyle) {\n                // Get the style definition and clone it, then merge it with the control's current style and apply it; Note that mergeStyles makes clones of the styles passed to it.\n                const mergedStyle = app.dv.mvc.formController.mergeStyles(uiControlToStyle.currentStyle, style);\n                // need the form controller to deal with expressions.\n                uiControlToStyle.applyStyle(mergedStyle, (form.raw || form).formController);\n            }\n        };\n    }\n\n    if (!api.ui.applyDefaultStyle) {\n        /**\n         * Apply the environment's currently configured default style to a form or control, and refresh its appearance.\n         * @param   {object}        form            The API reference to an open form (MVC).\n         * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n         */\n        api.ui.applyDefaultStyle = (form, control) => {\n            api.ui.applyStyle(form, control, api.ui.getDefaultStyle());\n        };\n    }\n\n    if (!api.ui.resetStyles) {\n         /**\n         * Apply the originally configured styles to a form or control, and refresh its appearance.\n         * @param   {object}        form            The API reference to an open form (MVC).\n         * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n         */\n        api.ui.resetStyles = (form, control) => {\n            const uiControlToStyle = api.ui.getStylableControlOrForm(form, control);\n            uiControlToStyle.resetStyle();\n            const parentStyle = (uiControlToStyle.parent && uiControlToStyle.parent.currentStyle) ? uiControlToStyle.parent.currentStyle : api.ui.getDefaultStyle();\n            uiControlToStyle.currentStyle = app.dv.mvc.formController.mergeStyles(parentStyle, uiControlToStyle.definition.Styles);\n            uiControlToStyle.applyStyle(uiControlToStyle.currentStyle);\n        };\n    }\n\n    if (!api.ui.getStyleFromUID) {\n        /**\n         * Get a style from its global identifier.\n         * @param   {string|object}        UID     The unique identifier of the style as a string or linker.\n         * @returns {object}                       The identified style.\n         */\n        api.ui.getStyleFromUID = UID => {\n            let linker = UID;\n            if (typeof UID === \"string\") {\n                linker = { UID };\n            }\n            return app.dv.cache.styles.allStyles.getVal(linker);\n        };\n    }\n\n    if (!api.ui.getDefaultStyle) {\n        /**\n         * Gets the environment's default style from configuration settings.\n         * @returns {object}                        The default style object.\n         */\n        api.ui.getDefaultStyle = () => {\n            return api.ui.getStyleFromUID(app.dv.cache.session.configEntity.ConfigValue.SavedThemes.find(theme => theme.IsCurrent).DefaultStyle);\n        };\n    }\n\n    if (!api.ui.ensureStyle) {\n        /**\n         * Ensure that the passed object is a Style, getting one from passed UID, if not.\n         * @param   {object|string|Linker}    style    A Style, or a string/Linker UID that represents one.\n         * @returns {object}                           A Style object.\n         */\n        api.ui.ensureStyle = style => {\n            if (!style || (style.clientProperties && style.clientProperties.entityType === \"Style\")) {\n                return style;\n            } else {\n                return api.ui.getStyleFromUID(style);\n            }\n        };\n    }\n\n    if (!api.ui.ensureGroupPanel) {\n        /**\n         * Ensure that the passed object is a Group Panel, getting one from passed UID and form, if not.\n         * @param   {object|string|Linker}    panel    A Group Panel, or a string/Linker UID that represents one.\n         * @param   {object}                  panel    A Form that hosts the Group Panel.\n         * @returns {object}                           A Group Panel object.\n         */\n        api.ui.ensureGroupPanel = (panel, form) => {\n            if (!panel || panel.typeName === \"zebra.ui.dvGroupPanel\") {\n                return panel;\n            } else {\n                return form.findControl(panel);\n            }\n        };\n    }\n\n    if (!api.ui.ensurePanel) {\n        /**\n         * Ensure that the passed object is a Panel, creating one, if not.\n         * @param   {object|string|Linker}    panel    A Panel.\n         * @param   {boolean[=true]}          create   Pass true to create a new panel if the object passed is not one.\n         * @returns {object}                           A Panel object.\n         */\n        api.ui.ensurePanel = (panel, create = true) => {\n            if (panel && panel.typeName === \"zebra.ui.dvPanel\") {\n                return panel;\n            } else {\n                return create ? new zebra.ui.dvPanel() : null;\n            }\n        };\n    }\n\n    if (!api.ui.ensureCheckbox) {\n        /**\n         * Ensure that the passed object is a Checkbox, getting one from passed UID and form, if not.\n         * @param   {object|string|Linker}    panel    A Checkbox, or a string/Linker UID that represents one.\n         * @param   {object}                  panel    A Form that hosts the Checkbox.\n         * @returns {object}                           A Checkbox object.\n         */\n        api.ui.ensureCheckbox = (checkbox, form) => {\n            if (!checkbox || (checkbox.typeName === \"zebra.ui.dvLayoutItem\" && checkbox.checkboxField)) {\n                return checkbox;\n            } else {\n                return api.ui.getFieldUIControl(checkbox, form);\n            }\n        };\n    }\n\n    if (!api.ui.ensureComboBox) {\n        /**\n         * Ensure that the passed object is a ComboBox, getting one from passed UID and form, if not.\n         * @param   {object|string|Linker}    panel    A ComboBox, or a string/Linker UID that represents one.\n         * @param   {object}                  panel    A Form that hosts the ComboBox.\n         * @returns {object}                           A ComboBox object.\n         */\n        api.ui.ensureComboBox = (combobox, form) => {\n            if (!combobox || combobox.typeName === \"zebra.ui.dvComboBox\") {\n                return combobox;\n            } else {\n                return api.ui.getFieldUIControl(combobox, form);\n            }\n        };\n    }\n\n    if (!api.ui.ensureDateTimeTextBox) {\n        /**\n         * Ensure that the passed object is a DateTime TextBox, getting one from passed UID and form, if not.\n         * @param   {object|string|Linker}    panel    A DateTime TextBox, or a string/Linker UID that represents one.\n         * @param   {object}                  panel    A Form that hosts the DateTime TextBox.\n         * @returns {object}                           A DateTime TextBox object.\n         */\n        api.ui.ensureDateTimeTextBox = (dateTimeTextBox, form) => {\n            if (!dateTimeTextBox || dateTimeTextBox.textField && dateTimeTextBox.textField.dateTimeField) {\n                return dateTimeTextBox;\n            } else {\n                return api.ui.getFieldUIControl(dateTimeTextBox, form);\n            }\n        };\n    }\n\n    if (!api.ui.ensureForm) {\n        /**\n         * Ensure that the passed object is a Form, getting one from passed UID, if not.\n         * @param   {object|string|Linker}    form    A Form, or a string/Linker UID that represents one.\n         * @returns {object}                          A Form object.\n         */\n        api.ui.ensureForm = form => {\n            if (form.typeName === \"app.dv.mvc\") {\n                return form;\n            } else if (form instanceof api.factory.View) {\n                return form.raw;\n            } else {\n                return api.utils.getOpenForm(form);\n            }\n        };\n    }\n\n    if (!api.ui.ensureKids) {\n        /**\n         * Get to the controls (\"kids\") collection from any of the following:\n         *     api.openForms.active.raw.formController.uiControl.kids\n         *     api.openForms.active.raw.formController.uiControl\n         *     api.openForms.active.raw.formController\n         *     api.openForms.active.raw\n         *     api.openForms.active\n         * @param   {object|Array}        container     A container or collection of controls.\n         * @returns {array}                             An array of controls from a form or the value passed in if alreay a container.\n         */\n        api.ui.ensureKids = container => {\n            let kidsCollection = container;\n            if (kidsCollection && !Array.isArray(kidsCollection)) {\n                if (kidsCollection.raw) kidsCollection = kidsCollection.raw;\n                if (kidsCollection.typeName === \"app.dv.mvc\") kidsCollection = kidsCollection.formController;\n                if (!kidsCollection.typeName && kidsCollection.uiControl) kidsCollection = kidsCollection.uiControl;\n                if (kidsCollection.kids) kidsCollection = kidsCollection.kids;\n            }\n            return kidsCollection;\n        };\n    }\n\n    if (!api.ui.flattenControls) {\n        /**\n         * Flatten all controls (\"kids\") as an array from any of the following:\n         *     api.openForms.active.raw.formController.uiControl.kids\n         *     api.openForms.active.raw.formController.uiControl\n         *     api.openForms.active.raw.formController\n         *     api.openForms.active.raw\n         *     api.openForms.active\n         * @param   {object|Array}        container     A container or collection of controls.\n         * @returns {array}                             An array of controls and all descendent controls recursively from a form or container of controls.\n         *                                              The resulting container's elements will still have their full hierarchy.\n         */\n        api.ui.flattenControls = container => {\n            let kids = api.ui.ensureKids(container);\n            let controls = [];\n            kids.forEach(control => {\n                if (control.kids && Array.isArray(control.kids) && control.kids.length) {\n                    controls.push(control);\n                    const moreKids = api.ui.flattenControls(control.kids);\n                    controls = controls.concat(moreKids);\n                }\n            });\n            return controls;\n        };\n    }\n\n    if (!api.ui.getControlsByTypeName) {\n        /**\n         * Get controls of a specified typeName from any of the following:\n         *     api.openForms.active.raw.formController.uiControl.kids\n         *     api.openForms.active.raw.formController.uiControl\n         *     api.openForms.active.raw.formController\n         *     api.openForms.active.raw\n         *     api.openForms.active\n         * @param   {object|Array}        container     A container or collection of controls.\n         * @param   {string}              typeName      The type name to match.\n         * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n         * @returns {array}                             An array of controls with a given typeName from a form or container of controls.\n         */\n        api.ui.getControlsByTypeName = (container, typeName, deepSearch = false) => {\n            let kids = api.ui.ensureKids(container);\n            if (deepSearch) {\n                kids = api.ui.flattenControls(kids);\n            }\n            return kids.filter(k => k.typeName === typeName);\n        };\n    }\n\n    if (!api.ui.getControlsByLabel) {\n        /**\n         * Get controls with a specified label from any of the following:\n         *     api.openForms.active.raw.formController.uiControl.kids\n         *     api.openForms.active.raw.formController.uiControl\n         *     api.openForms.active.raw.formController\n         *     api.openForms.active.raw\n         *     api.openForms.active\n         * @param   {object|Array}        container     A container or collection of controls.\n         * @param   {string}              label         The label to match.\n         * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n         * @returns {array}                             An array of controls with a given label from a form or container of controls.\n         */\n        api.ui.getControlsByLabel = (container, label, deepSearch = false) => {\n            let kids = api.ui.ensureKids(container);\n            if (deepSearch) {\n                kids = api.ui.flattenControls(kids);\n            }\n            return kids.filter(k => k.label && (api.utils.runFunction(k.label.getValue, k.label) === label));\n        };\n    }\n\n    if (!api.ui.getControlsByID) {\n        /**\n         * Get controls with a specified id from any of the following:\n         *     api.openForms.active.raw.formController.uiControl.kids\n         *     api.openForms.active.raw.formController.uiControl\n         *     api.openForms.active.raw.formController\n         *     api.openForms.active.raw\n         *     api.openForms.active\n         * @param   {object|Array}        container     A container or collection of controls.\n         * @param   {string}              id            The id to match.\n         * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n         * @returns {array}                             An array of controls with a given id from a form or container of controls.\n         */\n        api.ui.getControlsByID = (container, id, deepSearch = false) => {\n            let kids = api.ui.ensureKids(container);\n            if (deepSearch) {\n                kids = api.ui.flattenControls(kids);\n            }\n            return kids.filter(k => k.id === id);\n        };\n    }\n\n    if (!api.ui.getControlsOfType) {\n        /**\n         * Get controls of a specified type (using instanceof operator) from any of the following:\n         *     api.openForms.active.raw.formController.uiControl.kids\n         *     api.openForms.active.raw.formController.uiControl\n         *     api.openForms.active.raw.formController\n         *     api.openForms.active.raw\n         *     api.openForms.active\n         * @param   {object|Array}        container     A container or collection of controls.\n         * @param   {type}                type          The type to match.\n         * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n         * @returns {array}                             An array of controls of a given type from a form or container of controls.\n         */\n        api.ui.getControlsOfType = (container, type, deepSearch = false) => {\n            let kids = api.ui.ensureKids(container);\n            if (deepSearch) {\n                kids = api.ui.flattenControls(kids);\n            }\n            return kids.filter(k => k instanceof type);\n        };\n    }\n\n    if (!api.ui.applyBoxShadow) {\n        api.ui.applyBoxShadow = (apiForm, apiControl, boxShadow) => {\n            let divShadow = document.createElement(\"div\");\n            divShadow.style.boxShadow = boxShadow || \"rgba(0, 0, 0, 0.3) 0px 2px 4px 0px\";\n            if (apiControl.raw.border) {\n                divShadow.style.borderRadius = `${apiControl.raw.border.radius}px`;\n            }\n            divShadow.style.background = \"transparent\";\n            divShadow.style.pointerEvents = \"none\";\n\n            api.ui.overlayCanvasWithElement(apiForm, apiControl, divShadow);\n            apiControl.raw.divShadow = divShadow;\n        };\n    }\n\n    if (!api.ui.overlayCanvasWithElement) {\n        api.ui.overlayCanvasWithElement = (apiForm, apiControl, element) => {\n            let domElement = element;\n            if (typeof element === \"string\") {\n                // Create an actual DOM element if a string was passed in\n                domElement = document.createElement(\"div\");\n                domElement.style.background = \"transparent\";\n                domElement.style.overflowY = \"auto\";\n                domElement.innerHTML = element;\n                // Add a class that allows easy identification of overlaid items\n                domElement.classList.add(overlayClassName);\n            }\n            let rawCtl = apiControl.raw;\n            let scrollPnl = findScrollPanel(rawCtl);\n            let scrollMgr = null;\n\n            if (scrollPnl != null) {\n                scrollMgr = scrollPnl.scrollManager;\n            }\n\n            // Append the element to the top-level form's work area div\n            setElementPos(zebra.util.getAbsolutePosition(rawCtl), rawCtl);\n            const formWindow = apiForm.raw.topMVC.window;\n            formWindow.workarea.baseElement.appendChild(domElement);\n\n            rawCtl.laidout = (e) => {\n                setElementPos(zebra.util.getAbsolutePosition(rawCtl), rawCtl);\n            };\n\n            formWindow.on(\"winResize\", (e) => {\n                setElementPos(zebra.util.getAbsolutePosition(rawCtl), rawCtl);\n            });\n\n            if (scrollMgr && scrollMgr.target) {\n                scrollMgr.target.catchScrolled = rawCtl.laidout;\n            }\n\n            function setElementPos(controlPos, rawCtl) {\n                const elementStyle = domElement.style;\n\n                elementStyle.position = \"absolute\";\n\n                if (scrollMgr != null) {\n                    if (scrollMgr.sx < 0) {\n\n                    }\n                    else {\n                        elementStyle.left = `${controlPos.x}px`;\n                        elementStyle.width = `${rawCtl.width}px`;\n                    }\n\n                    let scrollPnlPos = zebra.util.getAbsolutePosition(scrollPnl);\n                    if (scrollMgr.sy < 0) {\n                        if (scrollPnlPos.y === 0) {\n                            elementStyle.top = `${controlPos.y}px`;\n                            elementStyle.height = `${rawCtl.height}px`;\n                        }\n                        else {\n                            controlPos.y -= scrollMgr.sy\n                            elementStyle.top = `${controlPos.y}px`;\n                            elementStyle.height = `${scrollPnl.height}px`;\n                        }\n                    }\n                    else {\n                        elementStyle.top = `${controlPos.y}px`;\n\n                        if (scrollPnlPos.y === 0) {\n                            elementStyle.height = `${rawCtl.height}px`;\n                        }\n                        else {\n                            elementStyle.height = `${scrollPnl.height}px`;\n                        }\n                    }\n                }\n                else {\n                    elementStyle.left = `${controlPos.x}px`;\n                    elementStyle.width = `${rawCtl.width}px`;\n                    elementStyle.top = `${controlPos.y}px`;\n                    elementStyle.height = `${rawCtl.height}px`;\n                }\n            }\n\n            function findScrollPanel(rawCtl) {\n                if (rawCtl.parent == null) {\n                    return null;\n                }\n                if (rawCtl.scrollManager != null) {\n                    return rawCtl;\n                }\n                else {\n                    return findScrollPanel(rawCtl.parent);\n                }\n            }\n\n            return domElement;\n        };\n    }\n});\n"],"file":"ui.js"}