{"version":3,"sources":["../../src/api/ui.js"],"names":["api","loadExtension","overlayClassName","getOverlayStyle","coordinates","top","left","absoluteRight","absoluteBottom","ControlBindingHelper","isOne","editControlAccessor","events","_isOne","_editControlAccessor","_events","controlMap","Map","form","typeName","nativeEventName","targetAccessor","control","textField","editControl","view","target","comboBox","content","checkboxField","contro","lcheckboxField","internalEventHandlers","handler","utils","runFunction","hasFocus","ui","controlHelper","action","propertySettingName","raw","entries","type","helpers","_helpers","eventName","getEvent","components","push","drivingView","UID","join","actionLinker","ActionID","Type","Settings","propertyLinker","$hash$","customHandler","delay","event","internalEventHandler","get","eventTarget","getEventTarget","timeout","invokeInternalHandler","window","clearTimeout","setTimeout","bindingsRegistry","register","key","getBindingKey","registrationFormID","ViewID","onRegister","isFunction","bind","subscribe","on","onDeregister","unbind","unsubscribe","off","deregister","getValidGap","uiControl","gap","defaultGap","validGap","Number","parseInt","isNaN","parent","createVerticalPanel","zebra","dvPanel","layout","ListLayout","STRETCH","createHorizontalPanel","FlowLayout","CENTER","HORIZONTAL","createStretchPanel","orientation","dvLayout","getMaxSize","sizes","width","Math","max","map","size","height","normalizeSize","normalizedSize","dimensionTranslator","normalizedDimension","undefined","stringValue","toString","percentIndex","indexOf","multiplier","substring","setFormSize","theForm","ensureForm","theSize","dimension","_debugMode","console","log","setFormLocation","location","x","y","setFormSizeAndLocation","checkboxToButtonPair","checkbox","selectedStyle","deselectedStyle","yesLabel","noLabel","buttonWidth","buttonHeight","hostForm","isVisible","booleanControl","ensureCheckbox","currentValue","getValue","setVisible","selectedButtonStyle","ensureStyle","deselectedButtonStyle","buttonPanel","toLowerCase","add","falseButton","dvButton","applyStyle","currentStyle","overrideStyle","setLabel","trueButton","specifiedSize","maxSize","getPreferredSize","applySize","setPreferredSize","vrp","message","error","Error","setComboBoxList","combobox","list","comboBoxControl","ensureComboBox","setList","fieldToComboBox","field","dvComboBox","domInput","util","getWindow","getInput","hAlign","RIGHT","vAlign","definition","Orientation","TOP","emitter","comboBoxToButtons","buttonArray","Array","isArray","cachedList","listItem","button","forEach","buttonGroupHelper","containerPanel","allowedMinValueCount","allowedMaxValueCount","boundPropertyID","initialValue","onSelection","onValueSet","ensureGroupPanel","ensurePanel","toLinker","controlHelpers","lastClickedButton","setValues","buttons","getControlsByTypeName","length","set","_toggleButtonValue","styleButtons","setFormValueFromControl","isSelected","hasValue","label","originalText","styleButton","formHelper","setControlValueFromForm","gridValue","boundPropertyGridValue","value","displayProperties","setText","styleToApply","helper","values","_values","_allowAddValue","_allowRemoveValue","remove","newSelectionValue","buttonValue","addValue","removeValue","valueCount","split","selectedRecord","gridValues","getVal","applyDropShadow","shadowColor","right","bottom","shadowBlur","shadowOffsetX","shadowOffsetY","border","setBorder","Border","targetBorder","getLeft","getTop","getRight","getBottom","paint","g","w","h","d","lineWidth","radius","outline","halfWidth","beginPath","rect","closePath","setColor","color","stroke","shadow","blur","offsetX","offsetY","fillStyle","fillRect","getFieldUIControl","controlID","self","findControl","getButtonUIControl","taskID","formController","formActions","getControlPosition","relativeToPanel","resPosition","getFieldCoordinates","rootPanel","topMVC","position","removeOverlay","overlay","id","element","document","getElementById","parentNode","removeChild","removeAllOverlays","elements","getElementsByClassName","overlayFieldWithElement","elementType","newElement","createElement","style","classList","getCanvas","canvas","parentElement","appendChild","overlayFieldWithDiv","overlayFieldWithVideo","source","controls","autoplay","loop","src","overlayFieldWithIframe","fld","iFrame","t","l","getCoordinatesForPropertyDropDown","formID","getOpenForm","fieldCoordinates","getDefaultForm","exception","getFormFromCurrentExpression","app","dv","exprEng","currexpression","mvc","getLastOpenForm","openForms","last","exc","getActiveForm","active","getDefaultView","getGroupPanelByHeaderText","headerText","formToUse","apiRef","getLayoutItemByName","name","panelToSearch","matchingPanel","searchPanel","panel","kids","p","Name","getStylableControlOrForm","uiControlToStyle","typeOfControl","setControlVisibility","visible","hideControl","showControl","Definition","getStyleFromUID","mergedStyle","mergeStyles","applyDefaultStyle","getDefaultStyle","resetStyles","resetStyle","parentStyle","Styles","linker","cache","styles","allStyles","session","configEntity","ConfigValue","SavedThemes","find","theme","IsCurrent","DefaultStyle","clientProperties","entityType","create","ensureDateTimeTextBox","dateTimeTextBox","dateTimeField","factory","View","ensureKids","container","kidsCollection","flattenControls","moreKids","concat","deepSearch","filter","k","getControlsByLabel","getControlsByID","getControlsOfType","applyBoxShadow","apiForm","apiControl","boxShadow","divShadow","borderRadius","background","pointerEvents","overlayCanvasWithElement","domElement","overflowY","innerHTML","rawCtl","scrollPnl","findScrollPanel","scrollMgr","scrollManager","setElementPos","getAbsolutePosition","formWindow","workarea","baseElement","laidout","e","catchScrolled","controlPos","elementStyle","sx","scrollPnlPos","sy"],"mappings":"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","sourcesContent":["export default (() => {\n    /**\n     * Extends the api.ui namespace with additional helper functions.\n     * Dependencies:\n     *    api.loadExtension\n     *    api.bindingsRegistry.register\n     *    api.bindingsRegistry.deregister\n     *    api.utils.toLinker\n     */\n    api.loadExtension(\"api.ui\", () => {\n        const overlayClassName = \"overlayFieldWithElement\";\n\n        const getOverlayStyle = coordinates => {\n            //Absolute position is needed on the main container of html elements in order to overlay the canvas. It also allows anchoring the bottom right coordinates to handle window resizing.\n            return `position:absolute;display:inline-block;resize:both;top:${coordinates.top}px;left:${coordinates.left}px;right:${coordinates.absoluteRight}px;bottom:${coordinates.absoluteBottom}px;`;\n        };\n\n        /**\n         * A helper used to determine if a control is of a given type to access its underlying edit control, and to access event binding components.\n         */\n        class ControlBindingHelper {\n            constructor({ isOne, editControlAccessor, events }) {\n                this._isOne = isOne;\n                this._editControlAccessor = editControlAccessor;\n                this._events = events;\n            }\n\n            /**\n             * Gets a function that returns a boolean value indicating whether the control is of a given type.\n             */\n            get isOne() {\n                return this._isOne;\n            }\n\n            /**\n             * Gets a functon that returns the component edit control of a given type.\n             */\n            get editControlAccessor() {\n                return this._editControlAccessor;\n            }\n\n            /**\n             * Gets a map of binding details and helper functions for the various events that a given control can fire.\n             */\n            get events() {\n                return this._events;\n            }\n        }\n\n        /**\n         * A map of helper functions and event binding configurations for a specific type of control (e.g. TextField, ComboBox).\n         */\n        const controlMap = new Map([\n            [\"Form\", new ControlBindingHelper({\n                isOne: form => form.typeName === \"app.dv.mvc\",\n                editControlAccessor: form => form,\n                events: {\n                    \"selectionChanged\": {\n                        nativeEventName: \"selectionChanged\",\n                        targetAccessor: form => form,\n                    },\n                }\n            })],\n            [\"TextField\", new ControlBindingHelper({\n                isOne: control => control.textField && (control.textField.typeName === \"zebra.ui.dvTextField\" || control.textField.typeName === \"zebra.ui.dvNumberField\"),\n                editControlAccessor: control => control.textField,\n                events: {\n                    \"textUpdated\": {\n                        nativeEventName: \"textUpdated\",\n                        targetAccessor: editControl => editControl.view.target,\n                    },\n                },\n            })],\n            [\"DateTimeField\", new ControlBindingHelper({\n                isOne: control => control.typeName === \"zebra.ui.dvDateTimeField\",\n                editControlAccessor: control => control,\n                events: {\n                    \"textUpdated\": {\n                        nativeEventName: \"textUpdated\",\n                        targetAccessor: editControl => editControl.view.target,\n                    },\n                },\n            })],\n            [\"ComboBox\", new ControlBindingHelper({\n                isOne: control => control.comboBox && control.comboBox.typeName === \"zebra.ui.dvComboBox\",\n                editControlAccessor: control => control.comboBox,\n                events: {\n                    \"textUpdated\": {\n                        nativeEventName: \"textUpdated\",\n                        targetAccessor: editControl => editControl.content.textField.view.target,\n                    },\n                    \"itemSelected\": {\n                        nativeEventName: \"\",\n                        targetAccessor: editControl => editControl,\n                    },\n                    \"clicked\": {\n                        nativeEventName: \"onClick\",\n                        targetAccessor: editControl => editControl.content.textField,\n                    }\n                },\n            })],\n            [\"Button\", new ControlBindingHelper({\n                isOne: control => control.typeName === \"zebra.ui.dvButton\",\n                editControlAccessor: control => control,\n                events: {\n                    \"fired\": {\n                        nativeEventName: \"fired\",\n                        targetAccessor: editControl => editControl,\n                    },\n                },\n            })],\n            // TODO: Checkbox configuration needs to be verified and/or modified/fully implemented\n            [\"Checkbox\", new ControlBindingHelper({\n                isOne: control => control.checkboxField && contro.lcheckboxField.typeName === \"zebra.ui.dvCheckbox\" ,\n                editControlAccessor: control => control.checkboxField,\n                events: {\n                    \"fired\": {\n                        nativeEventName: \"fired\",\n                        targetAccessor: editControl => editControl,\n                    },\n                },\n            })],\n        ]);\n\n        /**\n         * A map of event handlers corresponding to a public event name. The corresponding handler is called internally when\n         * the associated bound event fires. It is passed an optional custom handler function that will be called after any\n         * internal housekeeping is done.\n         */\n        const internalEventHandlers = new Map([\n            [\"selectionChanged\", (editControl, handler) => {\n                api.utils.runFunction(handler, null, [ editControl ]);\n            }],\n            [\"textUpdated\", (editControl, handler) => {\n                if (!editControl.hasFocus()) {\n                    // Don't do anything if the control doesn't have focus\n                    // (further propagation can cause an endless loop if grid cell is updating the field's text)\n                    return;\n                }\n\n                // Execute the provided handler, passing it the edit control\n                api.utils.runFunction(handler, null, [ editControl ]);\n            }],\n            [\"itemSelected\", (editControl, handler) => {\n                if (!editControl.hasFocus()) {\n                    // Don't do anything if the control doesn't have focus\n                    // (further propagation can cause an endless loop if grid cell is updating the field's text)\n                    return;\n                }\n\n                // Execute the provided handler, passing it the edit control\n                api.utils.runFunction(handler, null, [ editControl ]);\n            }],\n            [\"clicked\", (editControl, handler) => {\n                api.utils.runFunction(handler, null, [ editControl ]);\n            }],\n            [\"fired\", (editControl, handler) => {\n                api.utils.runFunction(handler, null, [ editControl ]);\n            }],\n        ]);\n\n        if (!api.ui.controlHelper) {\n            /**\n             * A helper object that can be used to bind events to a control.\n             */\n            api.ui.controlHelper = class {\n                /**\n                 * Constructs a helper that can be used to bind events to a control.\n                 * @param  {object}    control                The control instance.\n                 * @param  {object}    form                   The form that hosts the control instance.\n                 * @param  {object}    action                 Optionally, the custom action that is using the helper.\n                 * @param  {string}    propertySettingName    Optionally, the name of the setting on the action that\n                 *                                            identifies the property associated with any bindings.\n                 */\n                constructor(control, form, action, propertySettingName) {\n                    this.control = control;\n                    this.form = form.raw ? form.raw : form;\n                    this.propertySettingName = propertySettingName;\n                    this.action = action;\n                    for (let [type, helpers] of controlMap.entries()) {\n                        if (helpers.isOne(control)) {\n                            this.type = type;\n                            this._helpers = helpers;\n                            this.editControl = helpers.editControlAccessor(this.control);\n                            break;\n                        }\n                    }\n                }\n\n                /**\n                 * Gets the underlying target of a specific event for the control.\n                 * @param {string}        eventName        The event name that was previously bound.\n                 * @returns {object}                       The underlying target component for the specific control and event.\n                 */\n                getEventTarget(eventName) {\n                    return this.getEvent(eventName).targetAccessor(this.editControl);\n                }\n\n                /**\n                 * Gets the configuration for a specific event that the control fires. This can be used\n                 * to map public events to their underlying native events and to access the target\n                 * of the event to be bound. Because controls are made up of individual component\n                 * controls, the targets for various events may be different internally.\n                 * @param {string}        eventName        The event name that is being bound.\n                 * @returns {object}                       Details of the specific control's and event's binding.\n                 */\n                getEvent(eventName) {\n                    const events = this._helpers.events;\n                    if (events) {\n                        return events[eventName];\n                    }\n                    return null;\n                }\n\n                /**\n                 * Generates the most unique key possible using the control helper's constructor parameters.\n                 * @param {string}        eventName        The event name that is being bound.\n                 * @returns {string}                       A key suitable for the binding registry.\n                 */\n                getBindingKey(eventName) {\n                    const components = [];\n                    if (this.form) {\n                        components.push([\"Form\", this.form.drivingView.UID].join(\":\"));\n                    }\n                    if (this.action) {\n                        const actionLinker = this.action.ActionID;\n                        if (actionLinker) {\n                            components.push([actionLinker.Type, actionLinker.UID].join(\":\"));\n                        }\n                        if (this.propertySettingName && this.action.Settings) {\n                            const propertyLinker = this.action.Settings[this.propertySettingName];\n                            if (propertyLinker && propertyLinker.Type && propertyLinker.UID) {\n                                components.push([propertyLinker.Type, propertyLinker.UID].join(\":\"));\n                            }\n                        }\n                    }\n                    components.push([\"Control\", this.control.$hash$].join(\":\"));\n                    components.push(eventName);\n                    return components.join(\"|\");\n                }\n\n                /**\n                 * Binds an event handler for the control.\n                 * @param {string}        eventName        The event name that was previously bound.\n                 * @param {function}      customHandler    The function to be executed whenever the event fires.\n                 *                                         When called, it will be passed the bound edit control.\n                 * @param {number}        delay            Delay in milliseconds between events before execution. Defaults to 0.\n                 * @returns {object}                       The registered binding.\n                 */\n                bind(eventName, customHandler, delay = 0) {\n                    const event = this.getEvent(eventName);\n                    const internalEventHandler = internalEventHandlers.get(eventName);\n                    const eventTarget = this.getEventTarget(eventName);\n                    let timeout = null;\n                    const invokeInternalHandler = () => {\n                        window.clearTimeout(timeout);\n                        timeout = window.setTimeout(() => internalEventHandler(this.editControl, customHandler), delay);\n                    };\n                    const nativeEventName = event.nativeEventName;\n\n                    return api.bindingsRegistry.register({\n                        key: this.getBindingKey(eventName),\n                        registrationFormID: this.form.drivingView.ViewID,\n                        onRegister: () => {\n                            // Bind the actual event handler, and store it for potential unbinding\n                            if (nativeEventName) {\n                                if (api.utils.isFunction(eventTarget.bind)) {\n                                    eventTarget.bind(nativeEventName, invokeInternalHandler);\n                                } else if (api.utils.isFunction(eventTarget.subscribe)) {\n                                    // Some objects use subscribe/unSubscribe instead of bind/unbind\n                                    eventTarget.subscribe(nativeEventName, this.editControl, invokeInternalHandler);\n                                } else if (api.utils.isFunction(eventTarget.on)) {\n                                    // Some objects use subscribe/unSubscribe instead of bind/unbind\n                                    eventTarget.on(nativeEventName, invokeInternalHandler);\n                                }\n                            } else {\n                                // Some controls only have a single event, so the name is irrelevant and the syntax is different\n                                eventTarget.bind(invokeInternalHandler);\n                            }\n                        },\n                        onDeregister: () => {\n                            // When the registered binding is deregistered, unbind the event handler instance\n                            if (api.utils.isFunction(eventTarget.unbind)) {\n                                eventTarget.unbind(invokeInternalHandler);\n                            } else if (api.utils.isFunction(eventTarget.unsubscribe)) {\n                                // Some objects use subscribe/unSubscribe instead of bind/unbind\n                                eventTarget.unsubscribe(nativeEventName, this.editControl);\n                            } else if (api.utils.isFunction(eventTarget.off)) {\n                                // Some objects use subscribe/unSubscribe instead of bind/unbind\n                                eventTarget.off(nativeEventName, invokeInternalHandler);\n                            }\n                        }\n                    });\n                }\n\n                /**\n                 * Removes the binding for one of the control's previously bound event handlers.\n                 * @param {string}    eventName    The event name that was previously bound.\n                 * @returns {object}               The deregistered binding.\n                 */\n                unbind(eventName) {\n                    // Deregister the binding which will unbind the event handler instance\n                    return api.bindingsRegistry.deregister(this.getBindingKey(eventName));\n                }\n            };\n        }\n\n        if (!api.ui.getValidGap) {\n            api.ui.getValidGap = (uiControl, gap, defaultGap = 5) => {\n                let validGap = Number.parseInt(gap);\n                if (isNaN(validGap) || validGap === null) {\n                    // Use the control's gap or its parent's if none is specified\n                    validGap = uiControl.gap || (uiControl.parent ? uiControl.parent.gap : defaultGap) || defaultGap;\n                }\n            };\n        }\n\n        if (!api.ui.createVerticalPanel) {\n            api.ui.createVerticalPanel = gap => new zebra.ui.dvPanel(new zebra.layout.ListLayout(zebra.layout.STRETCH, gap));\n        }\n\n        if (!api.ui.createHorizontalPanel) {\n            api.ui.createHorizontalPanel = gap => new zebra.ui.dvPanel(new zebra.layout.FlowLayout(zebra.layout.STRETCH, zebra.layout.CENTER, zebra.layout.HORIZONTAL, gap));\n        }\n\n        if (!api.ui.createStretchPanel) {\n            api.ui.createStretchPanel = (orientation, gap) => new zebra.ui.dvPanel(new zebra.layout.dvLayout(orientation, gap));\n        }\n\n        if (!api.ui.getMaxSize) {\n            api.ui.getMaxSize = sizes => {\n                return {\n                    width: Math.max(...sizes.map(size => size ? size.width : 0)),\n                    height: Math.max(...sizes.map(size => size ? size.height : 0))\n                };\n            };\n        }\n\n        if (!api.ui.normalizeSize) {\n            api.ui.normalizeSize = size => {\n                const normalizedSize = size;\n                const dimensionTranslator = {\n                    width: \"innerWidth\",\n                    height: \"innerHeight\",\n                };\n                for (let key in normalizedSize) {\n                    let normalizedDimension = normalizedSize[key];\n                    if (normalizedDimension !== null && normalizedDimension !== undefined) {\n                        const stringValue = normalizedDimension.toString();\n                        const percentIndex = stringValue.indexOf(\"%\");\n                        if (percentIndex >= 0) {\n                            const multiplier = (Number.parseInt(stringValue.substring(0, percentIndex)) || 0) / 100;\n                            normalizedDimension = multiplier * window[dimensionTranslator[key]];\n                        } else {\n                            normalizedDimension = Number.parseInt(normalizedDimension);\n                        }\n                        normalizedSize[key] = normalizedDimension;\n                    }\n                }\n                return normalizedSize;\n            };\n        }\n\n        if (!api.ui.setFormSize) {\n            api.ui.setFormSize = (form, size) => {\n                const theForm = api.ui.ensureForm(form);\n                if (theForm) {\n                    const theSize = api.ui.normalizeSize(size);\n                    for (let key in theSize) {\n                        let dimension = theSize[key];\n                        if (dimension !== null && dimension !== undefined) {\n                            form.window[key] = dimension;\n                        }\n                    }\n                } else {\n                    if (api._debugMode) console.log(\"Form could not be found, so setFormSize could not be executed.\");\n                }\n            };\n        }\n\n        if (!api.ui.setFormLocation) {\n            api.ui.setFormLocation = (form, location) => {\n                const theForm = api.ui.ensureForm(form);\n                if (theForm) {\n                    form.window.left = location.left || location.x;\n                    form.window.top = location.top || location.y;\n                } else {\n                    if (api._debugMode) console.log(\"Form could not be found, so setFormLocation could not be executed.\");\n                }\n            };\n        }\n\n        if (api.ui.setFormSizeAndLocation) {\n            api.ui.setFormSizeAndLocation = (form, coordinates) => {\n                api.ui.setFormSize(form, coordinates);\n                api.ui.setFormLocation(form, coordinates);\n            };\n        }\n\n        if (!api.ui.checkboxToButtonPair) {\n            api.ui.checkboxToButtonPair = ({\n                checkbox,\n                form,\n                selectedStyle,\n                deselectedStyle,\n                yesLabel = \"Yes\",\n                noLabel = \"No\",\n                layout = \"horizontal\",\n                gap = null,\n                buttonWidth = null,\n                buttonHeight = null,\n            }) => {\n                const hostForm = api.ui.ensureForm(form);\n                if (hostForm && hostForm.isVisible) {\n                    const booleanControl = api.ui.ensureCheckbox(checkbox, hostForm);\n\n                    if (booleanControl) {\n                        const currentValue = booleanControl.checkboxField.getValue();\n\n                        // Hide any existing checkbox\n                        if (booleanControl.checkboxField) {\n                            booleanControl.checkboxField.setVisible(false);\n                        }\n\n                        //Set up styles\n                        const selectedButtonStyle = api.ui.ensureStyle(selectedStyle);\n                        const deselectedButtonStyle = api.ui.ensureStyle(deselectedStyle);\n\n                        if (selectedButtonStyle && deselectedButtonStyle) {\n                            // Create a container panel and add buttons in place of checkbox\n                            if (!booleanControl.buttonPanel) {\n                                booleanControl.buttonPanel = layout.toLowerCase() === \"horizontal\" ? api.ui.createHorizontalPanel(gap) : api.ui.createVerticalPanel(gap);\n                                booleanControl.add(booleanControl.buttonPanel);\n                            }\n                            let falseButton = booleanControl.falseButton;\n                            if (!falseButton) {\n                                falseButton = new zebra.ui.dvButton();\n                                booleanControl.buttonPanel.add(falseButton);\n                            }\n                            falseButton.applyStyle(booleanControl.currentStyle);\n                            falseButton.overrideStyle = currentValue === true ? deselectedButtonStyle : currentValue === false ? selectedButtonStyle : booleanControl.currentStyle;\n                            api.ui.applyStyle(form, falseButton, falseButton.overrideStyle);\n                            falseButton.setLabel(noLabel);\n                            let trueButton = booleanControl.trueButton;\n                            if (!trueButton) {\n                                trueButton = new zebra.ui.dvButton();\n                                booleanControl.buttonPanel.add(trueButton);\n                            }\n                            trueButton.applyStyle(booleanControl.currentStyle);\n                            trueButton.overrideStyle = currentValue === true ? deselectedButtonStyle : currentValue === false ? selectedButtonStyle : booleanControl.currentStyle;\n                            api.ui.applyStyle(form, trueButton, trueButton.overrideStyle);\n                            trueButton.setLabel(yesLabel);\n                            window.setTimeout(() => {\n                                if (falseButton && trueButton) {\n                                    const specifiedSize = {\n                                        width: Number.parseInt(buttonWidth),\n                                        height: Number.parseInt(buttonHeight)\n                                    };\n                                    const maxSize = api.ui.getMaxSize([trueButton.getPreferredSize(), falseButton.getPreferredSize()]);\n                                    const applySize = {\n                                        width: specifiedSize.width || maxSize.width,\n                                        height: specifiedSize.height || maxSize.height\n                                    };\n                                    falseButton.setPreferredSize(applySize.width, applySize.height);\n                                    falseButton.vrp();\n                                    trueButton.setPreferredSize(applySize.width, applySize.height);\n                                    trueButton.vrp();\n                                }\n                            }, 11);\n                        } else {\n                            const message = \"You must supply styles for selected and deselected button states. See console for more details.\";\n                            console.error(message, \"selectedStyle:\", selectedStyle, \"deselectedStyle:\", deselectedStyle);\n                            throw new Error(message);\n                        }\n                    } else {\n                        const message = \"Could not find checkbox control. See console for more details.\";\n                        console.error(message, \"checkbox:\", checkbox);\n                        throw new Error(message);\n                    }\n                    return booleanControl;\n                } else {\n                    if (api._debugMode) console.log(\"Form is not visible, so checkboxToButtonPair could not be executed.\");\n                    return null;\n                }\n            };\n        }\n\n        if (!api.ui.setComboBoxList) {\n            api.ui.setComboBoxList = (combobox, form, list) => {\n                const hostForm = api.ui.ensureForm(form);\n                if (hostForm && hostForm.isVisible) {\n                    const comboBoxControl = api.ui.ensureComboBox(combobox.comboBox || combobox, hostForm);\n                    if (comboBoxControl) {\n                        comboBoxControl.setList(list || []);\n                    }\n                }\n            };\n        }\n\n        if (!api.ui.fieldToComboBox) {\n            api.ui.fieldToComboBox = (field, form, list = []) => {\n                const hostForm = api.ui.ensureForm(form);\n                if (hostForm && hostForm.isVisible) {\n                    if (field.raw) {\n                        field = field.raw;\n                    }\n                    const comboBox = new zebra.ui.dvComboBox(list || [], true);\n                    comboBox.domInput = zebra.util.getWindow(form).getInput(\"combo\");\n                    comboBox.hAlign = zebra.layout.RIGHT;\n                    comboBox.vAlign = field.definition.Orientation === 1 ? zebra.layout.STRETCH : zebra.layout.TOP;\n                    field.textField.setVisible(false);\n                    field.comboBox = comboBox;\n                    // Pass through event handlers between the hidden text field and new combobox\n                    field.comboBox.emitter = field.textField.emitter;\n                    field.add(comboBox);\n                    comboBox.applyStyle(field.currentStyle);\n                }\n            };\n        }\n\n        if (!api.ui.comboBoxToButtons) {\n            api.ui.comboBoxToButtons = ({\n                combobox,\n                form,\n                selectedStyle,\n                deselectedStyle,\n                layout = \"vertical\",\n                gap = null,\n                buttonWidth = null,\n                buttonHeight = null,\n            }) => {\n                const hostForm = api.ui.ensureForm(form);\n                if (hostForm && hostForm.isVisible) {\n                    const comboBoxControl = api.ui.ensureComboBox(combobox, hostForm);\n\n                    if (comboBoxControl) {\n                        const currentValue = comboBoxControl.comboBox.getValue();\n\n                        // Hide existing combobox\n                        comboBoxControl.comboBox.setVisible(false);\n\n                        // Set up styles\n                        const selectedButtonStyle = api.ui.ensureStyle(selectedStyle);\n                        const deselectedButtonStyle = api.ui.ensureStyle(deselectedStyle);\n\n                        if (selectedButtonStyle && deselectedButtonStyle) {\n                            // Create a container panel and add buttons in place of checkbox\n                            if (!comboBoxControl.buttonPanel) {\n                                comboBoxControl.buttonPanel = layout.toLowerCase() === \"horizontal\" ? api.ui.createHorizontalPanel(gap) : api.ui.createVerticalPanel(gap);\n                                comboBoxControl.add(comboBoxControl.buttonPanel);\n                            }\n                            if (!comboBoxControl.buttonArray && Array.isArray(comboBoxControl.comboBox.cachedList)) {\n                                comboBoxControl.buttonArray = comboBoxControl.comboBox.cachedList.map(listItem => {\n                                    if (listItem) {\n                                        const button = new zebra.ui.dvButton();\n                                        button.applyStyle(comboBoxControl.currentStyle);\n                                        button.overrideStyle = currentValue === listItem ? selectedButtonStyle : deselectedButtonStyle;\n                                        api.ui.applyStyle(form, button, button.overrideStyle);\n                                        button.setLabel(listItem);\n                                        comboBoxControl.buttonPanel.add(button);\n                                        return button;\n                                    }\n                                });\n                            }\n                            window.setTimeout(() => {\n                                if (comboBoxControl && comboBoxControl.buttonArray) {\n                                    const specifiedSize = {\n                                        width: Number.parseInt(buttonWidth),\n                                        height: Number.parseInt(buttonHeight)\n                                    };\n                                    const maxSize = api.ui.getMaxSize(comboBoxControl.buttonArray.map(button => button ? button.getPreferredSize() : null ));\n                                    const applySize = {\n                                        width: specifiedSize.width || maxSize.width,\n                                        height: specifiedSize.height || maxSize.height\n                                    };\n                                    comboBoxControl.buttonArray.forEach(button => {\n                                        if (button) {\n                                            button.setPreferredSize(applySize.width, applySize.height);\n                                            button.vrp();\n                                        }\n                                    });\n                                }\n                            }, 11);\n                        } else {\n                            const message = \"You must supply styles for selected and deselected button states. See console for more details.\";\n                            console.error(message, \"selectedStyle:\", selectedStyle, \"deselectedStyle:\", deselectedStyle);\n                            throw new Error(message);\n                        }\n                    } else {\n                        const message = \"Could not find combobox control. See console for more details.\";\n                        console.error(message, \"combobox:\", combobox);\n                        throw new Error(message);\n                    }\n\n                    return comboBoxControl;\n                } else {\n                    if (api._debugMode) console.log(\"Form is not visible, so comboBoxToButtons could not be executed.\");\n                    return null;\n                }\n            };\n        }\n\n        if (!api.ui.buttonGroupHelper) {\n            api.ui.buttonGroupHelper = class {\n                constructor({\n                    form,\n                    containerPanel,\n                    selectedStyle,\n                    deselectedStyle,\n                    allowedMinValueCount = 0,\n                    allowedMaxValueCount,\n                    action,\n                    propertySettingName,\n                    boundPropertyID,\n                    initialValue,\n                    onSelection,\n                    onValueSet,\n                }) {\n                    this.form = api.ui.ensureForm(form);\n                    if (this.form.isVisible) {\n                        this.propertySettingName = propertySettingName;\n                        this.action = action;\n                        // Allow use of a Group Panel or a regular one as a button container\n                        // TODO: Support any valid container?\n                        this.containerPanel = api.ui.ensureGroupPanel(containerPanel, this.form) || api.ui.ensurePanel(containerPanel);\n                        this.selectedStyle = api.ui.ensureStyle(selectedStyle);\n                        this.deselectedStyle = api.ui.ensureStyle(deselectedStyle);\n                        // Allow the specified min value count or none if not specified\n                        this.allowedMinValueCount = Number.parseInt(allowedMinValueCount) || 0;\n                        this.boundPropertyID = api.utils.toLinker(boundPropertyID);\n                        this.controlHelpers = new Map();\n                        this.lastClickedButton = null;\n                        this.setValues(initialValue);\n\n                        if (this.selectedStyle && this.deselectedStyle) {\n                            if (this.containerPanel) {\n                                // Wire up each button contained by the group panel to a shared event handler\n                                // TODO: Instead of a deep search, look specifically for components that contain a button at the first appropriate child level of the container\n                                const buttons = api.ui.getControlsByTypeName(this.containerPanel, \"zebra.ui.dvButton\", true);\n                                if (buttons) {\n                                    // Allow the specified max value count or count of all possible values if not specified\n                                    this.allowedMaxValueCount = Number.parseInt(allowedMaxValueCount) || buttons.length;\n                                    buttons.forEach(button => {\n                                        // Create a helper for each button and map by unique ID\n                                        const controlHelper = new api.ui.controlHelper(button, this.form, action, propertySettingName);\n                                        this.controlHelpers.set(button.$hash$, controlHelper);\n                                        // Bind each button's fired event to a shared handler\n                                        controlHelper.bind(\"fired\", control => {\n                                            this._toggleButtonValue(control);\n                                            this.styleButtons();\n                                            api.utils.runFunction(this.setFormValueFromControl, null, [ this.form ]);\n                                            api.utils.runFunction(onSelection, null, [ this ]);\n                                        });\n                                        controlHelper.isSelected = () => this.hasValue(button.label.originalText);\n                                        // Style button according to value\n                                        this.styleButton(button);\n                                    });\n                                    if (this.boundPropertyID) {\n                                        // Create a helper for the form since we need to know when a bound property value may have changed due to row selection\n                                        const formHelper = new api.ui.controlHelper(this.form, this.form, action, propertySettingName);\n                                        this.formHelper = formHelper;\n                                        this.setControlValueFromForm = () => {\n                                            // Update the button group's value with the bound field's value from the selected record\n                                            const gridValue = this.boundPropertyGridValue;\n                                            let value = gridValue && gridValue.getValue ? gridValue.getValue() : null;\n                                            if (value && typeof value !== \"string\" && value.toString) {\n                                                value = value.toString();\n                                            }\n                                            this.value = value;\n                                            api.utils.runFunction(onValueSet, null, [ this ]);\n                                        };\n                                        this.setFormValueFromControl = () => {\n                                            // Assign the value to the bound property\n                                            const gridValue = this.boundPropertyGridValue;\n                                            if (gridValue) {\n                                                // gridValue.setValue(this.value);\n                                                gridValue.displayProperties.setText(this.value);\n                                            }\n                                        };\n                                        // Bind future value changes\n                                        formHelper.bind(\"selectionChanged\", this.setControlValueFromForm);\n                                        // Set current value\n                                        this.setControlValueFromForm(this.form);\n                                    }\n                                } else {\n                                    const message = \"There are no buttons inside Panel.\";\n                                    console.error(message, containerPanel);\n                                    throw new Error(message);\n                                }\n                            } else {\n                                const message = \"Could not find Panel.\";\n                                console.error(message, \"containerPanel:\", containerPanel);\n                                throw new Error(message);\n                            }\n                        } else {\n                            const message = \"You must supply styles for selected and deselected button states. See console for more details.\";\n                            console.error(message, \"selectedStyle:\", selectedStyle, \"deselectedStyle:\", deselectedStyle);\n                            throw new Error(message);\n                        }\n                    } else {\n                        if (api._debugMode) console.log(\"Could not create buttonGroupHelper since form is not visible.\");\n                    }\n                }\n\n                styleButton(button) {\n                    const styleToApply = this.hasValue(button.label.originalText) ? this.selectedStyle : this.deselectedStyle;\n                    button.overrideStyle = styleToApply;\n                    api.ui.applyStyle(this.form, button, styleToApply);\n                }\n\n                styleButtons() {\n                    this.controlHelpers.forEach(helper => {\n                        this.styleButton(helper.control);\n                    });\n                }\n\n                setValues(values) {\n                    if (Array.isArray(values)) {\n                        this._values = values;\n                    } else if (values !== null && values !== undefined) {\n                        this._values = [values];\n                    } else {\n                        this._values = [];\n                    }\n                }\n\n                addValue(value) {\n                    if (this._allowAddValue(value)) {\n                        this._values.push(value);\n                    }\n                }\n\n                removeValue(value) {\n                    if (this._allowRemoveValue(value)) {\n                        this._values.remove(value);\n                    }\n                }\n\n                hasValue(value) {\n                    return Array.isArray(this._values) ?\n                        this._values.indexOf(value) > -1 :\n                        false;\n                }\n\n                get valueCount() {\n                    return Array.isArray(this._values) ?\n                        this._values.length :\n                        0;\n                }\n\n                set value(values) {\n                    // Split comma-separated values into an array\n                    if (values && typeof values === \"string\") {\n                        values = values.split(\",\");\n                    }\n                    this.setValues(values);\n                    this.styleButtons();\n                }\n\n                get value() {\n                    // Return values as an array (limit as specified)\n                    return Array.isArray(this._values) ?\n                        this._values.join(\",\") :\n                        null;\n                }\n\n                get values() {\n                    return this._values || [];\n                }\n\n                get boundPropertyGridValue() {\n                    if (this.boundPropertyID && this.form && this.form.selectedRecord && this.form.selectedRecord.gridValues) {\n                        return this.form.selectedRecord.gridValues.getVal(this.boundPropertyID);\n                    } else {\n                        return null;\n                    }\n                }\n\n                _toggleButtonValue(button) {\n                    this.lastClickedButton = button;\n                    const controlHelper = this.controlHelpers.get(button.$hash$);\n                    if (controlHelper) {\n                        // Get the toggled boolean value that indicates whether the button is currently selected\n                        const newSelectionValue = !controlHelper.isSelected();\n                        const buttonValue = button.label.originalText;\n                        if (this.allowedMaxValueCount <= 1) {\n                            // Replace value if only one is allowed at a time\n                            if (newSelectionValue === true) {\n                                this.value = buttonValue;\n                            } else if (newSelectionValue === false && this.allowedMinValueCount < 1) {\n                                // Allow clearing value if no values are required\n                                this.value = null;\n                            }\n                        } else {\n                            // Update the underlying values array with the button's value\n                            if (newSelectionValue === true) {\n                                this.addValue(buttonValue);\n                            } else if (newSelectionValue === false) {\n                                this.removeValue(buttonValue);\n                            }\n                        }\n                    } else {\n                        console.error(\"Could not find control helper for button \", button);\n                    }\n                }\n\n                _allowAddValue(value) {\n                    return this.valueCount + (this.hasValue(value) ? 0 : 1) <= this.allowedMaxValueCount;\n                }\n\n                _allowRemoveValue(value) {\n                    return this.valueCount - (this.hasValue(value) ? 1 : 0) >= this.allowedMinValueCount;\n                }\n            };\n        }\n\n        if (!api.ui.applyDropShadow) {\n            api.ui.applyDropShadow = ({ uiControl, shadowColor = \"#888888\", left = 0, top = 0, right = 5, bottom = 5, shadowBlur = 10, shadowOffsetX = 5, shadowOffsetY = 5 }) => {\n                if (!uiControl.border) {\n                    uiControl.setBorder(new zebra.ui.Border('transparent', 1));\n                }\n                const targetBorder = uiControl.border;\n\n                targetBorder.getLeft = () => Number.parseInt(left) || 0;\n                targetBorder.getTop = () => Number.parseInt(top) || 0;\n                targetBorder.getRight = () => Number.parseInt(right) || 5;\n                targetBorder.getBottom = () => Number.parseInt(bottom) || 5;\n\n                targetBorder.paint = function (g, x, y, w, h, d) {\n                    const lineWidth = g.lineWidth;\n                    g.lineWidth = this.width;\n\n                    if (this.radius > 0) {\n                        this.outline(g, x, y, w, h, d);\n                    }\n                    else {\n                        const halfWidth = this.width / 2;\n                        g.beginPath();\n                        g.rect(x + halfWidth, y + halfWidth, w - this.width, h - this.width);\n                        g.closePath();\n                    }\n\n                    g.setColor(this.color);\n                    g.lineWidth = this.width;\n                    g.stroke();\n                    g.lineWidth = lineWidth;\n\n                    if (this.shadow) {\n                        g.shadowColor = this.shadow.color || shadowColor;\n                        g.shadowBlur = this.shadow.blur || Number.parseInt(shadowBlur) || 10;\n                        g.shadowOffsetX = this.shadow.offsetX || Number.parseInt(shadowOffsetX) || 5;\n                        g.shadowOffsetY = this.shadow.offsetY || Number.parseInt(shadowOffsetY) || 5;\n\n                        g.fillStyle = \"white\";\n                        // TODO: Clean up magic numbers\n                        g.fillRect(5 + this.width, 5 + this.width, w - ((6 * 2) + this.getRight()), h - ((6 * 2) + this.getBottom()));\n\n                        // Reset shadow attributes so text label is not shadowed\n                        g.shadowBlur = 0;\n                        g.shadowColor = \"black\";\n                        g.shadowOffsetX = 0;\n                        g.shadowOffsetY = 0;\n                    }\n                };\n                targetBorder.shadow = {};\n            };\n        }\n\n        if (!api.ui.getFieldUIControl) {\n            // Returns the uiControl object for the specified property UID.\n            /*\n            * getFieldUIControl\n            *   controlID: The name of the control or UID (string or linker) of the control's bound property to retrieve.\n            *   form: The Form object containing a formController to use.\n            *\n            * Returns the field's UIControl drawn on the specified view.\n            */\n            api.ui.getFieldUIControl = (controlID, form) => {\n                // If form is not specified, use the current form.\n                if (form === null || form === undefined) {\n                    form = self().raw;\n                } else {\n                    form = api.ui.ensureForm(form);\n                }\n\n                if (form && form.isVisible) {\n                    let field = form.findControl(controlID) || form.findControl(api.utils.toLinker(controlID));\n                    if (field) {\n                        if (field.raw) {\n                            return field.raw;\n                        }\n                        if (field[\"$hash$\"]) {\n                            return field;\n                        }\n                    } else {\n                        if (api._debugMode) console.log(\"No field UI Control was found for getFieldUIControl('\", controlID, \"'). Be sure the field is bound to a form control.\");\n                        if (api._debugMode) console.log(controlID);\n                        return null;\n                    }\n                } else {\n                    if (api._debugMode) console.log(\"No form specified and no 'current form'...getFieldUIControl('\", controlID, \"'), or form is hidden.\");\n                    if (api._debugMode) console.log(controlID);\n                    return null;\n                }\n            };\n        }\n\n        if (!api.ui.getButtonUIControl) {\n            api.ui.getButtonUIControl = (taskID, form) => {\n                // If form is not specified, use the current form.\n                if (form === null || form === undefined) {\n                    form = self().raw;\n                }\n\n                if (form !== null) {\n                    // Get the specified button using its ID from the formController (which contains all of the UI Controls).\n                    const button = form.formController.formActions.getVal(taskID);\n\n                    // Get the uiControl for the button.\n                    if (button && button.uiControl && Array.isArray(button.uiControl) && button.uiControl.length) {\n                        return button.uiControl[0];\n                    } else {\n                        if (api._debugMode) console.log(\"No button UI Control was found for getButtonUIControl('\", taskID, \"'). Be sure the button is bound to a form task.\");\n                        if (api._debugMode) console.log(taskID);\n                        return null;\n                    }\n                } else {\n                    if (api._debugMode) console.log(\"No form specified and no 'current form'...getButtonUIControl('\", taskID, \"').\");\n                    if (api._debugMode) console.log(taskID);\n                    return null;\n                }\n            };\n        }\n\n        if (!api.ui.getControlPosition) {\n            /*\n            * getControlTopLeftInSection\n            *   uiControl: The target uiControl to locate.\n            *   relativeToPanel: The parent panel to which the relative left and top are measured. Usually the main layout panel of the formControler (mvc.formController.uiControl).\n            *\n            * Returns the position of the specified uiControl on the form layout relative to the specified parent panel..PW\n            */\n            api.ui.getControlPosition = (uiControl, relativeToPanel) => {\n                // Create the result position object.\n                var resPosition = { left: 0, top: 0 };\n\n                // Verify the uiControl is not null.\n                if (uiControl !== null) {\n                    // Recursively search the parent panels and track the left and top values.\n                    while (uiControl.parent !== null && uiControl !== relativeToPanel) {\n                        resPosition.top += uiControl.y;\n                        resPosition.left += uiControl.x;\n                        uiControl = uiControl.parent;\n                    }\n                }\n\n                // Return the resulting position.\n                return resPosition;\n            };\n        }\n\n        if (!api.ui.getFieldCoordinates) {\n            api.ui.getFieldCoordinates = (controlID, form) => {\n                // Get the property UI Control object\n                const field = api.ui.getFieldUIControl(controlID, form);\n                if (field) {\n                    // Store the root panel for the form (containing the entire form layout).\n                    const rootPanel = form.topMVC;\n                    // Get the UI Control's position and size.\n                    const position = api.ui.getControlPosition(field, rootPanel);\n                    if (position) {\n                        const coordinates = {\n                            top: position.top + field.top,\n                            left: position.left + field.left,\n                            width: field.width - (field.left + field.right),\n                            height: field.height - (field.top + field.bottom),\n                            absoluteRight: field.right,\n                            absoluteBottom: field.bottom\n                        };\n                        return coordinates;\n                    } else {\n                        if (api._debugMode) console.log(\"getFieldCoordinates: Unable to get control position.\");\n                    }\n                } else {\n                if (api._debugMode) console.log(\"getFieldCoordinates: Unabled to find form field for property UID: \", controlID);\n                }\n                return null;\n            };\n        }\n\n        if (!api.ui.removeOverlay) {\n            /**\n             * Removes a DOM element.\n             * @param {string|object}    overlay    Either the string identifier of the DOM element or the object itself.\n             */\n            api.ui.removeOverlay = overlay => {\n                let id;\n                if (typeof overlay === \"string\") {\n                    id = overlay;\n                } else if (typeof overlay === \"object\") {\n                    id = overlay.id;\n                }\n                const element = document.getElementById(id);\n                if (element) {\n                    element.parentNode.removeChild(element);\n                }\n            };\n        }\n\n        if (!api.ui.removeAllOverlays) {\n            /**\n             * Removes all DOM elements that have been overlaid using one of the api.ui.overlay helper functions.\n             */\n            api.ui.removeAllOverlays = () => {\n                const elements = document.getElementsByClassName(overlayClassName);\n                if (elements) {\n                    [...elements].forEach(element => api.ui.removeOverlay(element));\n                }\n            };\n        }\n\n        if (!api.ui.overlayFieldWithElement) {\n            /*\n            * Overlays the specified field on the specified form with a new DOM element.\n            * @param {string|object}    controlID      The name of the control or UID (string or linker) of the control's bound property to retrieve.\n            * @param {object}           form           The form on which the property is hosted.\n            * @param {string}           id             An identifier that the element will be tagged with.\n            * @param {string[div]}      elementType    The type of DOM element to created. Defaults to div.\n            * @returns {DOMElement}                    The new element for additional modification.\n            */\n            api.ui.overlayFieldWithElement = (controlID, form, id, elementType = \"div\") => {\n                const coordinates = api.ui.getFieldCoordinates(controlID, form);\n                if (coordinates) {\n                    // Create a new element.\n                    const newElement = document.createElement(elementType);\n                    newElement.id = id;\n                    newElement.style = getOverlayStyle(coordinates);\n\n                    // Add a class that allows easy identification of overlaid items\n                    newElement.classList.add(overlayClassName);\n\n                    //Add the element to the html element of the specified form.\n                    form.formController.uiControl.getCanvas().canvas.parentElement.appendChild(newElement);\n\n                    // Return the element for additional use.\n                    return newElement;\n                }\n                return null;    // Return null if unable to overlay the element.\n            };\n        }\n\n        if (!api.ui.overlayFieldWithDiv) {\n            api.ui.overlayFieldWithDiv = (controlID, form, id) => {\n                return api.ui.overlayFieldWithElement(controlID, form, id);\n            };\n        }\n\n        if (!api.ui.overlayFieldWithVideo) {\n            api.ui.overlayFieldWithVideo = (controlID, form, id, source, controls = true, autoplay = true, loop = true) => {\n                const newElement = api.ui.overlayFieldWithElement(controlID, form, id, \"video\");\n                newElement.src = source;\n                newElement.controls = controls;\n                newElement.autoplay = autoplay;\n                newElement.loop = loop;\n                return newElement;\n            };\n        }\n\n        if (!api.ui.overlayFieldWithIframe) {\n            /*\n            * Overlays the specified field on the specified form with a new <iFrame> tag.\n            * Returns the new <iFrame> tag object for additional modification.\n            */\n            api.ui.overlayFieldWithIframe = (controlID, form) => {\n                // Get the property UI Control object.\n                var fld = api.ui.getFieldUIControl(controlID, form);\n                if (fld !== null) {\n                    // Store the root panel for the form (containing the entire form layout).\n                    var rootPanel = form.formController.uiControl;\n\n                    // Get the UI Controls position and size.\n                    var position = api.ui.getControlPosition(fld, rootPanel);\n                    if (position !== null) {\n                        // Create a new iFrame object.\n                        var iFrame = document.createElement(\"iframe\");\n                        var t = position.top + fld.top;\n                        var l = position.left + fld.left;\n                        var w = fld.width - (fld.left + fld.right);\n                        var h = fld.height - (fld.top + fld.bottom);\n\n                        //Absolute position is needed on the main container of html elements in order to overlay the canvas.\n                        iFrame.style=`position:absolute;background-color:#ffffff;display:inline-block;padding-bottom:30px;border:none;top:${t}px;left:${l}px;width:${w}px;height:${h}px;`;\n\n                        //Add the iFrame to the html element of the specified form.\n                        form.window.canvas.canvas.parentElement.appendChild(iFrame);\n\n                        return iFrame; // Return the iFrame for additional use.\n                    } else {\n                        if (api._debugMode) console.log(\"overlayFieldWithIframe: Unable to get control position.\");\n                    }\n                } else {\n                    if (api._debugMode) console.log(\"Unable to find form field for property UID: \" + controlID);\n                }\n                return null;    // Return null if unable to overlay the iFrame.\n            };\n        }\n\n        if (!api.ui.getCoordinatesForPropertyDropDown) {\n            /**\n             * Gets a position where a drop-down can be placed directly under a control bound to a property on a form.\n             * @param {Object} formID        A numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n             * @param {Object} controlID     The name of the control or UID (string or linker) of the control's bound property to retrieve.\n             * @returns {Object}             Coordinates { top, left, width, height } directly under the field's control.\n             */\n            api.ui.getCoordinatesForPropertyDropDown = (formID, controlID) => {\n                // Get the form (it should already be open)\n                const form = api.utils.getOpenForm(formID);\n                // Get the position of the field bound to the property\n                const fieldCoordinates = api.ui.getFieldCoordinates(controlID, form);\n                fieldCoordinates.top += fieldCoordinates.height;\n                return fieldCoordinates;\n            };\n        }\n\n        if (!api.ui.getDefaultForm) {\n            // TODO: When implementing this in the core code, note that current returns null if a designer is open;\n            //       therefore, we may want to hold a reference to the most recently active view and return that\n            //       prior to returning last() which is always the most recently opened view sorted by original\n            //       instantiation time, not activation time...JH\n            /*\n            * Returns the active form if there is one, starting from the context of the current expression, if any; otherwise returns the one that was last instantiated.\n            */\n            api.ui.getDefaultForm = () => {\n                let form = null;\n                try {\n                    form = self();\n                    if (!form || !form.formController) {\n                        form = null;\n                    }\n                } catch (exception) { }\n                if (!form) {\n                    const getFormFromCurrentExpression = () => {\n                        if (app.dv.helpers.exprEng.currexpression) {\n                            return app.dv.helpers.exprEng.currexpression.mvc;\n                        } else {\n                            return null;\n                        }\n                    };\n                    const getLastOpenForm = () => {\n                        try {\n                            return api.openForms.last().raw;\n                        } catch (exc) {}\n                    };\n                    const getActiveForm = () => {\n                        try {\n                            return api.openForms.active.raw;\n                        } catch(exc) {}\n                    };\n                    form = getFormFromCurrentExpression() || getActiveForm() || getLastOpenForm();\n                }\n                return api.ui.ensureForm(form);\n            };\n        }\n\n        if (!api.ui.getDefaultView) {\n            // Alias View -> Form\n            api.ui.getDefaultView = api.ui.getDefaultForm;\n        }\n\n        if (!api.ui.getGroupPanelByHeaderText) {\n            /**\n             * Search for a Group Panel by its header text. Searches recurseivly on the form.\n             * @param {Text} headerText                        The exact Header Text of the panel to find.\n             * @param {Object} form                            The API reference to a form (MVC). Use api.openForms.active for the current form.\n             * @returns {Panel}                                The matching panel object, if any.\n             */\n            api.ui.getGroupPanelByHeaderText = (headerText, form) => {\n                const formToUse = form.raw ? form : form.apiRef;\n                if (formToUse && formToUse.raw && formToUse.raw.formController) {\n                    return api.ui.getLayoutItemByName(headerText, formToUse.raw.formController.uiControl);\n                } else {\n                    return null;\n                }\n            };\n        }\n\n        if (!api.ui.getLayoutItemByName) {\n            api.ui.getLayoutItemByName = (name, panelToSearch) => {\n                var matchingPanel = null;\n                const searchPanel = panel => {\n                    if (matchingPanel != null) {\n                        return; // Stop seaching, we found it..PW\n                    }\n\n                    // Include the panel itself in the search since we might be starting somewhere inside the top-level panel\n                    panel.kids.forEach(function(p) {\n                        if (p.definition && p.definition.Name === name) {\n                            //We have a match, return the panel..PW\n                            matchingPanel = p;\n                        } else {\n                            // Keep searching..PW\n                            searchPanel(p);\n                        }\n                    });\n                };\n\n                searchPanel(panelToSearch); //Begin seraching..PW\n                return matchingPanel;\n            };\n        }\n\n        if (!api.ui.getStylableControlOrForm) {\n            /**\n             * Get a UI control (or form if control is nothing) that has styles and applyStyle method from an identifier.\n             * @param   {object}        form            The API reference to an open form (MVC).\n             * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n             * @returns {type}                          A component that can be styled.\n             */\n            api.ui.getStylableControlOrForm = (form, control) => {\n                let uiControlToStyle = control;\n                if (!control) {\n                    // If no control or ID was passed, assume we're styling the form, and get its stylable component\n                    uiControlToStyle = form.formController ? form.formController.uiControl : null;\n                } else if (control.uiControl) {\n                    uiControlToStyle = control.uiControl;\n                } else if (!control.currentStyle) {\n                    // Get the underlying stylable component by a control's ID if that's what was passed in\n                    const typeOfControl = typeof control;\n                    if (typeOfControl === \"number\") {\n                        // Numeric ID is a button\n                        uiControlToStyle = api.ui.getButtonUIControl(control, form);\n                    } else if (typeOfControl === \"string\" || typeOfControl === \"object\") {\n                        // String/UID is a field\n                        uiControlToStyle = api.ui.getFieldUIControl(control, form);\n                    }\n                }\n                return uiControlToStyle;\n            };\n        }\n\n        if (!api.ui.setControlVisibility) {\n            /**\n             * Shows or hides a control.\n             * @param   {object}        form            The API reference to an open form (MVC).\n             * @param   {object|number} control         The control or its ID (relative to form) that should be manipulated.\n             * @param   {boolean}       visible         Pass true to show; false to hide.\n             * @returns {type}                          A component that can be hidden.\n             */\n            api.ui.setControlVisibility = (form, control, visible) => {\n                const uiControl = api.ui.getStylableControlOrForm(form, control);\n                if (uiControl && uiControl.setVisible) {\n                    return uiControl.setVisible(visible);\n                }\n                return null;\n            };\n        }\n\n        if (!api.ui.hideControl) {\n            /**\n             * Hides a control.\n             * @param   {object}        form            The API reference to an open form (MVC).\n             * @param   {object|number} control         The control or its ID (relative to form) that should be manipulated.\n             * @returns {type}                          A component that can be hidden.\n             */\n            api.ui.hideControl = (form, control) => {\n                return api.ui.setControlVisibility(form, control, false);\n            };\n        }\n\n        if (!api.ui.showControl) {\n            /**\n             * Shows a control.\n             * @param   {object}        form            The API reference to an open form (MVC).\n             * @param   {object|number} control         The control or its ID (relative to form) that should be manipulated.\n             * @returns {type}                          A component that can be hidden.\n             */\n            api.ui.showControl = (form, control) => {\n                return api.ui.setControlVisibility(form, control, true);\n            };\n        }\n\n        if (!api.ui.applyStyle) {\n            /**\n             * Apply a style to a form or control, and refresh its appearance.\n             * @param   {object}        form            The API reference to an open form (MVC).\n             * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n             * @param   {object|string} style           The style or its UID that should be applied.\n             */\n            api.ui.applyStyle = (form, control, style) => {\n                if (typeof style === \"string\" || (typeof style === \"object\" && !style.Definition)) {\n                    // Get a style reference by its UID if that's what was passed\n                    style = api.ui.getStyleFromUID(style);\n                }\n                const uiControlToStyle = api.ui.getStylableControlOrForm(form, control);\n                if (uiControlToStyle) {\n                    // Get the style definition and clone it, then merge it with the control's current style and apply it; Note that mergeStyles makes clones of the styles passed to it.\n                    const mergedStyle = app.dv.mvc.formController.mergeStyles(uiControlToStyle.currentStyle, style);\n                    // need the form controller to deal with expressions.\n                    uiControlToStyle.applyStyle(mergedStyle, (form.raw || form).formController);\n                }\n            };\n        }\n\n        if (!api.ui.applyDefaultStyle) {\n            /**\n             * Apply the environment's currently configured default style to a form or control, and refresh its appearance.\n             * @param   {object}        form            The API reference to an open form (MVC).\n             * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n             */\n            api.ui.applyDefaultStyle = (form, control) => {\n                api.ui.applyStyle(form, control, api.ui.getDefaultStyle());\n            };\n        }\n\n        if (!api.ui.resetStyles) {\n             /**\n             * Apply the originally configured styles to a form or control, and refresh its appearance.\n             * @param   {object}        form            The API reference to an open form (MVC).\n             * @param   {object|number} control         The control or its ID (relative to form) whose styles should be manipulated.\n             */\n            api.ui.resetStyles = (form, control) => {\n                const uiControlToStyle = api.ui.getStylableControlOrForm(form, control);\n                uiControlToStyle.resetStyle();\n                const parentStyle = (uiControlToStyle.parent && uiControlToStyle.parent.currentStyle) ? uiControlToStyle.parent.currentStyle : api.ui.getDefaultStyle();\n                uiControlToStyle.currentStyle = app.dv.mvc.formController.mergeStyles(parentStyle, uiControlToStyle.definition.Styles);\n                uiControlToStyle.applyStyle(uiControlToStyle.currentStyle);\n            };\n        }\n\n        if (!api.ui.getStyleFromUID) {\n            /**\n             * Get a style from its global identifier.\n             * @param   {string|object}        UID     The unique identifier of the style as a string or linker.\n             * @returns {object}                       The identified style.\n             */\n            api.ui.getStyleFromUID = UID => {\n                let linker = UID;\n                if (typeof UID === \"string\") {\n                    linker = { UID };\n                }\n                return app.dv.cache.styles.allStyles.getVal(linker);\n            };\n        }\n\n        if (!api.ui.getDefaultStyle) {\n            /**\n             * Gets the environment's default style from configuration settings.\n             * @returns {object}                        The default style object.\n             */\n            api.ui.getDefaultStyle = () => {\n                return api.ui.getStyleFromUID(app.dv.cache.session.configEntity.ConfigValue.SavedThemes.find(theme => theme.IsCurrent).DefaultStyle);\n            };\n        }\n\n        if (!api.ui.ensureStyle) {\n            /**\n             * Ensure that the passed object is a Style, getting one from passed UID, if not.\n             * @param   {object|string|Linker}    style    A Style, or a string/Linker UID that represents one.\n             * @returns {object}                           A Style object.\n             */\n            api.ui.ensureStyle = style => {\n                if (!style || (style.clientProperties && style.clientProperties.entityType === \"Style\")) {\n                    return style;\n                } else {\n                    return api.ui.getStyleFromUID(style);\n                }\n            };\n        }\n\n        if (!api.ui.ensureGroupPanel) {\n            /**\n             * Ensure that the passed object is a Group Panel, getting one from passed UID and form, if not.\n             * @param   {object|string|Linker}    panel    A Group Panel, or a string/Linker UID that represents one.\n             * @param   {object}                  panel    A Form that hosts the Group Panel.\n             * @returns {object}                           A Group Panel object.\n             */\n            api.ui.ensureGroupPanel = (panel, form) => {\n                if (!panel || panel.typeName === \"zebra.ui.dvGroupPanel\") {\n                    return panel;\n                } else {\n                    return form.findControl(panel);\n                }\n            };\n        }\n\n        if (!api.ui.ensurePanel) {\n            /**\n             * Ensure that the passed object is a Panel, creating one, if not.\n             * @param   {object|string|Linker}    panel    A Panel.\n             * @param   {boolean[=true]}          create   Pass true to create a new panel if the object passed is not one.\n             * @returns {object}                           A Panel object.\n             */\n            api.ui.ensurePanel = (panel, create = true) => {\n                if (panel && panel.typeName === \"zebra.ui.dvPanel\") {\n                    return panel;\n                } else {\n                    return create ? new zebra.ui.dvPanel() : null;\n                }\n            };\n        }\n\n        if (!api.ui.ensureCheckbox) {\n            /**\n             * Ensure that the passed object is a Checkbox, getting one from passed UID and form, if not.\n             * @param   {object|string|Linker}    panel    A Checkbox, or a string/Linker UID that represents one.\n             * @param   {object}                  panel    A Form that hosts the Checkbox.\n             * @returns {object}                           A Checkbox object.\n             */\n            api.ui.ensureCheckbox = (checkbox, form) => {\n                if (!checkbox || (checkbox.typeName === \"zebra.ui.dvLayoutItem\" && checkbox.checkboxField)) {\n                    return checkbox;\n                } else {\n                    return api.ui.getFieldUIControl(checkbox, form);\n                }\n            };\n        }\n\n        if (!api.ui.ensureComboBox) {\n            /**\n             * Ensure that the passed object is a ComboBox, getting one from passed UID and form, if not.\n             * @param   {object|string|Linker}    panel    A ComboBox, or a string/Linker UID that represents one.\n             * @param   {object}                  panel    A Form that hosts the ComboBox.\n             * @returns {object}                           A ComboBox object.\n             */\n            api.ui.ensureComboBox = (combobox, form) => {\n                if (!combobox || combobox.typeName === \"zebra.ui.dvComboBox\") {\n                    return combobox;\n                } else {\n                    return api.ui.getFieldUIControl(combobox, form);\n                }\n            };\n        }\n\n        if (!api.ui.ensureDateTimeTextBox) {\n            /**\n             * Ensure that the passed object is a DateTime TextBox, getting one from passed UID and form, if not.\n             * @param   {object|string|Linker}    panel    A DateTime TextBox, or a string/Linker UID that represents one.\n             * @param   {object}                  panel    A Form that hosts the DateTime TextBox.\n             * @returns {object}                           A DateTime TextBox object.\n             */\n            api.ui.ensureDateTimeTextBox = (dateTimeTextBox, form) => {\n                if (!dateTimeTextBox || dateTimeTextBox.textField && dateTimeTextBox.textField.dateTimeField) {\n                    return dateTimeTextBox;\n                } else {\n                    return api.ui.getFieldUIControl(dateTimeTextBox, form);\n                }\n            };\n        }\n\n        if (!api.ui.ensureForm) {\n            /**\n             * Ensure that the passed object is a Form, getting one from passed UID, if not.\n             * @param   {object|string|Linker}    form    A Form, or a string/Linker UID that represents one.\n             * @returns {object}                          A Form object.\n             */\n            api.ui.ensureForm = form => {\n                if (form.typeName === \"app.dv.mvc\") {\n                    return form;\n                } else if (form instanceof api.factory.View) {\n                    return form.raw;\n                } else {\n                    return api.utils.getOpenForm(form);\n                }\n            };\n        }\n\n        if (!api.ui.ensureKids) {\n            /**\n             * Get to the controls (\"kids\") collection from any of the following:\n             *     api.openForms.active.raw.formController.uiControl.kids\n             *     api.openForms.active.raw.formController.uiControl\n             *     api.openForms.active.raw.formController\n             *     api.openForms.active.raw\n             *     api.openForms.active\n             * @param   {object|Array}        container     A container or collection of controls.\n             * @returns {array}                             An array of controls from a form or the value passed in if alreay a container.\n             */\n            api.ui.ensureKids = container => {\n                let kidsCollection = container;\n                if (kidsCollection && !Array.isArray(kidsCollection)) {\n                    if (kidsCollection.raw) kidsCollection = kidsCollection.raw;\n                    if (kidsCollection.typeName === \"app.dv.mvc\") kidsCollection = kidsCollection.formController;\n                    if (!kidsCollection.typeName && kidsCollection.uiControl) kidsCollection = kidsCollection.uiControl;\n                    if (kidsCollection.kids) kidsCollection = kidsCollection.kids;\n                }\n                return kidsCollection;\n            };\n        }\n\n        if (!api.ui.flattenControls) {\n            /**\n             * Flatten all controls (\"kids\") as an array from any of the following:\n             *     api.openForms.active.raw.formController.uiControl.kids\n             *     api.openForms.active.raw.formController.uiControl\n             *     api.openForms.active.raw.formController\n             *     api.openForms.active.raw\n             *     api.openForms.active\n             * @param   {object|Array}        container     A container or collection of controls.\n             * @returns {array}                             An array of controls and all descendent controls recursively from a form or container of controls.\n             *                                              The resulting container's elements will still have their full hierarchy.\n             */\n            api.ui.flattenControls = container => {\n                let kids = api.ui.ensureKids(container);\n                let controls = [];\n                kids.forEach(control => {\n                    if (control.kids && Array.isArray(control.kids) && control.kids.length) {\n                        controls.push(control);\n                        const moreKids = api.ui.flattenControls(control.kids);\n                        controls = controls.concat(moreKids);\n                    }\n                });\n                return controls;\n            };\n        }\n\n        if (!api.ui.getControlsByTypeName) {\n            /**\n             * Get controls of a specified typeName from any of the following:\n             *     api.openForms.active.raw.formController.uiControl.kids\n             *     api.openForms.active.raw.formController.uiControl\n             *     api.openForms.active.raw.formController\n             *     api.openForms.active.raw\n             *     api.openForms.active\n             * @param   {object|Array}        container     A container or collection of controls.\n             * @param   {string}              typeName      The type name to match.\n             * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n             * @returns {array}                             An array of controls with a given typeName from a form or container of controls.\n             */\n            api.ui.getControlsByTypeName = (container, typeName, deepSearch = false) => {\n                let kids = api.ui.ensureKids(container);\n                if (deepSearch) {\n                    kids = api.ui.flattenControls(kids);\n                }\n                return kids.filter(k => k.typeName === typeName);\n            };\n        }\n\n        if (!api.ui.getControlsByLabel) {\n            /**\n             * Get controls with a specified label from any of the following:\n             *     api.openForms.active.raw.formController.uiControl.kids\n             *     api.openForms.active.raw.formController.uiControl\n             *     api.openForms.active.raw.formController\n             *     api.openForms.active.raw\n             *     api.openForms.active\n             * @param   {object|Array}        container     A container or collection of controls.\n             * @param   {string}              label         The label to match.\n             * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n             * @returns {array}                             An array of controls with a given label from a form or container of controls.\n             */\n            api.ui.getControlsByLabel = (container, label, deepSearch = false) => {\n                let kids = api.ui.ensureKids(container);\n                if (deepSearch) {\n                    kids = api.ui.flattenControls(kids);\n                }\n                return kids.filter(k => k.label && (api.utils.runFunction(k.label.getValue, k.label) === label));\n            };\n        }\n\n        if (!api.ui.getControlsByID) {\n            /**\n             * Get controls with a specified id from any of the following:\n             *     api.openForms.active.raw.formController.uiControl.kids\n             *     api.openForms.active.raw.formController.uiControl\n             *     api.openForms.active.raw.formController\n             *     api.openForms.active.raw\n             *     api.openForms.active\n             * @param   {object|Array}        container     A container or collection of controls.\n             * @param   {string}              id            The id to match.\n             * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n             * @returns {array}                             An array of controls with a given id from a form or container of controls.\n             */\n            api.ui.getControlsByID = (container, id, deepSearch = false) => {\n                let kids = api.ui.ensureKids(container);\n                if (deepSearch) {\n                    kids = api.ui.flattenControls(kids);\n                }\n                return kids.filter(k => k.id === id);\n            };\n        }\n\n        if (!api.ui.getControlsOfType) {\n            /**\n             * Get controls of a specified type (using instanceof operator) from any of the following:\n             *     api.openForms.active.raw.formController.uiControl.kids\n             *     api.openForms.active.raw.formController.uiControl\n             *     api.openForms.active.raw.formController\n             *     api.openForms.active.raw\n             *     api.openForms.active\n             * @param   {object|Array}        container     A container or collection of controls.\n             * @param   {type}                type          The type to match.\n             * @param   {boolean[false]}      deepSearch    Pass true to search recursively.\n             * @returns {array}                             An array of controls of a given type from a form or container of controls.\n             */\n            api.ui.getControlsOfType = (container, type, deepSearch = false) => {\n                let kids = api.ui.ensureKids(container);\n                if (deepSearch) {\n                    kids = api.ui.flattenControls(kids);\n                }\n                return kids.filter(k => k instanceof type);\n            };\n        }\n\n        if (!api.ui.applyBoxShadow) {\n            api.ui.applyBoxShadow = (apiForm, apiControl, boxShadow) => {\n                let divShadow = document.createElement(\"div\");\n                divShadow.style.boxShadow = boxShadow || \"rgba(0, 0, 0, 0.3) 0px 2px 4px 0px\";\n                if (apiControl.raw.border) {\n                    divShadow.style.borderRadius = `${apiControl.raw.border.radius}px`;\n                }\n                divShadow.style.background = \"transparent\";\n                divShadow.style.pointerEvents = \"none\";\n\n                api.ui.overlayCanvasWithElement(apiForm, apiControl, divShadow);\n                apiControl.raw.divShadow = divShadow;\n            };\n        }\n\n        if (!api.ui.overlayCanvasWithElement) {\n            api.ui.overlayCanvasWithElement = (apiForm, apiControl, element) => {\n                let domElement = element;\n                if (typeof element === \"string\") {\n                    // Create an actual DOM element if a string was passed in\n                    domElement = document.createElement(\"div\");\n                    domElement.style.background = \"transparent\";\n                    domElement.style.overflowY = \"auto\";\n                    domElement.innerHTML = element;\n                    // Add a class that allows easy identification of overlaid items\n                    domElement.classList.add(overlayClassName);\n                }\n                let rawCtl = apiControl.raw;\n                let scrollPnl = findScrollPanel(rawCtl);\n                let scrollMgr = null;\n\n                if (scrollPnl != null) {\n                    scrollMgr = scrollPnl.scrollManager;\n                }\n\n                // Append the element to the top-level form's work area div\n                setElementPos(zebra.util.getAbsolutePosition(rawCtl), rawCtl);\n                const formWindow = apiForm.raw.topMVC.window;\n                formWindow.workarea.baseElement.appendChild(domElement);\n\n                rawCtl.laidout = (e) => {\n                    setElementPos(zebra.util.getAbsolutePosition(rawCtl), rawCtl);\n                };\n\n                formWindow.on(\"winResize\", (e) => {\n                    setElementPos(zebra.util.getAbsolutePosition(rawCtl), rawCtl);\n                });\n\n                if (scrollMgr && scrollMgr.target) {\n                    scrollMgr.target.catchScrolled = rawCtl.laidout;\n                }\n\n                function setElementPos(controlPos, rawCtl) {\n                    const elementStyle = domElement.style;\n\n                    elementStyle.position = \"absolute\";\n\n                    if (scrollMgr != null) {\n                        if (scrollMgr.sx < 0) {\n\n                        }\n                        else {\n                            elementStyle.left = `${controlPos.x}px`;\n                            elementStyle.width = `${rawCtl.width}px`;\n                        }\n\n                        let scrollPnlPos = zebra.util.getAbsolutePosition(scrollPnl);\n                        if (scrollMgr.sy < 0) {\n                            if (scrollPnlPos.y === 0) {\n                                elementStyle.top = `${controlPos.y}px`;\n                                elementStyle.height = `${rawCtl.height}px`;\n                            }\n                            else {\n                                controlPos.y -= scrollMgr.sy\n                                elementStyle.top = `${controlPos.y}px`;\n                                elementStyle.height = `${scrollPnl.height}px`;\n                            }\n                        }\n                        else {\n                            elementStyle.top = `${controlPos.y}px`;\n\n                            if (scrollPnlPos.y === 0) {\n                                elementStyle.height = `${rawCtl.height}px`;\n                            }\n                            else {\n                                elementStyle.height = `${scrollPnl.height}px`;\n                            }\n                        }\n                    }\n                    else {\n                        elementStyle.left = `${controlPos.x}px`;\n                        elementStyle.width = `${rawCtl.width}px`;\n                        elementStyle.top = `${controlPos.y}px`;\n                        elementStyle.height = `${rawCtl.height}px`;\n                    }\n                }\n\n                function findScrollPanel(rawCtl) {\n                    if (rawCtl.parent == null) {\n                        return null;\n                    }\n                    if (rawCtl.scrollManager != null) {\n                        return rawCtl;\n                    }\n                    else {\n                        return findScrollPanel(rawCtl.parent);\n                    }\n                }\n\n                return domElement;\n            };\n        }\n    });\n})();\n"],"file":"ui.js"}