{"version":3,"sources":["../../src/api/bindingsRegistry.js"],"names":["api","loadExtension","bindingsRegistry","bindings","Map","register","key","onRegister","onDeregister","onExecute","executionInterval","deregisterOnExecute","registrationFormID","registryItem","get","deregister","registrationResult","utils","runFunction","set","Number","parseInt","executionIntervalHandle","window","setInterval","execute","deregistrationResult","clearInterval","_debugMode","console","log","executionFormID","passedValue","executionResult","undefined","executedPassedValue","delayDeregistration","getExecutionResult","getPassedValue"],"mappings":";;;;;;;eAAgB,YAAM;AAClB;;;;;;AAMA;AACAA,EAAAA,GAAG,CAACC,aAAJ,CAAkB,sBAAlB,EAA0C,YAAM;AAC5C,QAAI,CAACD,GAAG,CAACE,gBAAJ,CAAqBC,QAA1B,EAAoC;AAChCH,MAAAA,GAAG,CAACE,gBAAJ,CAAqBC,QAArB,GAAgC,IAAIC,GAAJ,EAAhC;AACH;;AAED,QAAI,CAACJ,GAAG,CAACE,gBAAJ,CAAqBG,QAA1B,EAAoC;AAChC;;;;;;;;;;;;AAYAL,MAAAA,GAAG,CAACE,gBAAJ,CAAqBG,QAArB,GAAgC,gBAA8G;AAAA,YAA3GC,GAA2G,QAA3GA,GAA2G;AAAA,YAAtGC,UAAsG,QAAtGA,UAAsG;AAAA,YAA1FC,YAA0F,QAA1FA,YAA0F;AAAA,YAA5EC,SAA4E,QAA5EA,SAA4E;AAAA,YAAjEC,iBAAiE,QAAjEA,iBAAiE;AAAA,YAA9CC,mBAA8C,QAA9CA,mBAA8C;AAAA,YAAzBC,kBAAyB,QAAzBA,kBAAyB;AAC1I,YAAMT,QAAQ,GAAGH,GAAG,CAACE,gBAAJ,CAAqBC,QAAtC,CAD0I,CAE1I;;AACA,YAAIU,YAAY,GAAGV,QAAQ,CAACW,GAAT,CAAaR,GAAb,CAAnB;;AACA,YAAIO,YAAJ,EAAkB;AACd;AACAb,UAAAA,GAAG,CAACE,gBAAJ,CAAqBa,UAArB,CAAgCT,GAAhC;AACH;;AACDO,QAAAA,YAAY,GAAG;AACXN,UAAAA,UAAU,EAAVA,UADW;AAEXC,UAAAA,YAAY,EAAZA,YAFW;AAGXC,UAAAA,SAAS,EAATA,SAHW;AAIXE,UAAAA,mBAAmB,EAAnBA,mBAJW;AAKXC,UAAAA,kBAAkB,EAAlBA,kBALW;AAMXI,UAAAA,kBAAkB,EAAEhB,GAAG,CAACiB,KAAJ,CAAUC,WAAV,CAAsBX,UAAtB,EAAkC,IAAlC,EAAwC,CAAEM,YAAF,CAAxC;AANT,SAAf,CAR0I,CAgB1I;;AACAV,QAAAA,QAAQ,CAACgB,GAAT,CAAab,GAAb,EAAkBO,YAAlB,EAjB0I,CAkB1I;;AACAH,QAAAA,iBAAiB,GAAGU,MAAM,CAACC,QAAP,CAAgBX,iBAAhB,CAApB;;AACA,YAAIA,iBAAJ,EAAuB;AACnBG,UAAAA,YAAY,CAACS,uBAAb,GAAuCC,MAAM,CAACC,WAAP,CAAmB,YAAM;AAAE,mBAAOxB,GAAG,CAACE,gBAAJ,CAAqBuB,OAArB,CAA6B;AAAEnB,cAAAA,GAAG,EAAHA;AAAF,aAA7B,CAAP;AAA+C,WAA1E,EAA4EI,iBAA5E,CAAvC;AACH;;AACD,eAAOG,YAAP;AACH,OAxBD;AAyBH;;AAED,QAAI,CAACb,GAAG,CAACE,gBAAJ,CAAqBa,UAA1B,EAAsC;AAClC;;;;;AAKAf,MAAAA,GAAG,CAACE,gBAAJ,CAAqBa,UAArB,GAAkC,UAAAT,GAAG,EAAI;AACrC,YAAMH,QAAQ,GAAGH,GAAG,CAACE,gBAAJ,CAAqBC,QAAtC;AACA,YAAIuB,oBAAoB,GAAG,IAA3B,CAFqC,CAGrC;;AACA,YAAMb,YAAY,GAAGV,QAAQ,CAACW,GAAT,CAAaR,GAAb,CAArB;;AACA,YAAIO,YAAJ,EAAkB;AACd;AACAa,UAAAA,oBAAoB,GAAG1B,GAAG,CAACiB,KAAJ,CAAUC,WAAV,CAAsBL,YAAY,CAACL,YAAnC,EAAiD,IAAjD,EAAuD,CAAEK,YAAF,CAAvD,CAAvB,CAFc,CAGd;;AACA,cAAIA,YAAY,CAACS,uBAAjB,EAA0C;AACtCC,YAAAA,MAAM,CAACI,aAAP,CAAqBd,YAAY,CAACS,uBAAlC;AACAT,YAAAA,YAAY,CAACS,uBAAb,GAAuC,IAAvC;AACH;;AACDnB,UAAAA,QAAQ,UAAR,CAAgBG,GAAhB;AACH,SATD,MASO;AACH,cAAIN,GAAG,CAAC4B,UAAR,EAAoBC,OAAO,CAACC,GAAR,wDAA4DxB,GAA5D;AACvB;;AACD,eAAOoB,oBAAP;AACH,OAlBD;AAmBH;;AAED,QAAI,CAAC1B,GAAG,CAACE,gBAAJ,CAAqBuB,OAA1B,EAAmC;AAC/B;;;;;;;AAOAzB,MAAAA,GAAG,CAACE,gBAAJ,CAAqBuB,OAArB,GAA+B,iBAAuD;AAAA,YAApDnB,GAAoD,SAApDA,GAAoD;AAAA,YAA/CyB,eAA+C,SAA/CA,eAA+C;AAAA,YAA9BhB,UAA8B,SAA9BA,UAA8B;AAAA,YAAlBiB,WAAkB,SAAlBA,WAAkB;AAClF,YAAM7B,QAAQ,GAAGH,GAAG,CAACE,gBAAJ,CAAqBC,QAAtC;AACA,YAAI8B,eAAe,GAAG,IAAtB;AACA,YAAIP,oBAAoB,GAAG,IAA3B,CAHkF,CAIlF;;AACA,YAAMb,YAAY,GAAGV,QAAQ,CAACW,GAAT,CAAaR,GAAb,CAArB;;AACA,YAAIO,YAAJ,EAAkB;AACd;AACAA,UAAAA,YAAY,CAACkB,eAAb,GAA+BA,eAA/B,CAFc,CAGd;;AACAlB,UAAAA,YAAY,CAACmB,WAAb,GAA2BA,WAA3B,CAJc,CAKd;;AACAC,UAAAA,eAAe,GAAGjC,GAAG,CAACiB,KAAJ,CAAUC,WAAV,CAAsBL,YAAY,CAACJ,SAAnC,EAA8C,IAA9C,EAAoD,CAAEI,YAAF,CAApD,CAAlB,CANc,CAOd;;AACAA,UAAAA,YAAY,CAACoB,eAAb,GAA+BA,eAA/B,CARc,CASd;;AACA,cAAIpB,YAAY,CAACF,mBAAb,IAAoCI,UAAxC,EAAoD;AAChD;AACA;AACA,gBAAI,CAACA,UAAD,IAAeiB,WAAW,KAAKE,SAA/B,IAA4CrB,YAAY,CAACsB,mBAAb,KAAqC,IAArF,EAA2F;AACvFtB,cAAAA,YAAY,CAACuB,mBAAb,GAAmC,IAAnC;AACH,aAFD,MAEQ;AACJV,cAAAA,oBAAoB,GAAG1B,GAAG,CAACE,gBAAJ,CAAqBa,UAArB,CAAgCT,GAAhC,CAAvB;AACH;AACJ;AACJ,SAnBD,MAmBO;AACH,cAAIN,GAAG,CAAC4B,UAAR,EAAoBC,OAAO,CAACC,GAAR,wDAA4DxB,GAA5D;AACvB,SA3BiF,CA4BlF;;;AACA,eAAO2B,eAAe,IAAIP,oBAA1B;AACH,OA9BD;AA+BH;;AAED,QAAI,CAAC1B,GAAG,CAACE,gBAAJ,CAAqBmC,kBAA1B,EAA8C;AAC1CrC,MAAAA,GAAG,CAACE,gBAAJ,CAAqBmC,kBAArB,GAA0C,UAAC/B,GAAD,EAAS;AAC/C,YAAI2B,eAAe,GAAG,IAAtB;AACA,YAAM9B,QAAQ,GAAGH,GAAG,CAACE,gBAAJ,CAAqBC,QAAtC,CAF+C,CAG/C;;AACA,YAAMU,YAAY,GAAGV,QAAQ,CAACW,GAAT,CAAaR,GAAb,CAArB;;AACA,YAAIO,YAAJ,EAAkB;AACdoB,UAAAA,eAAe,GAAGpB,YAAY,CAACoB,eAA/B;AACH,SAFD,MAEO;AACH,cAAIjC,GAAG,CAAC4B,UAAR,EAAoBC,OAAO,CAACC,GAAR,wDAA4DxB,GAA5D;AACvB;;AACD,eAAO2B,eAAP;AACH,OAXD;AAYH;;AAED,QAAI,CAACjC,GAAG,CAACE,gBAAJ,CAAqBoC,cAA1B,EAA0C;AACtCtC,MAAAA,GAAG,CAACE,gBAAJ,CAAqBoC,cAArB,GAAsC,UAAChC,GAAD,EAAS;AAC3C,YAAI0B,WAAW,GAAG,IAAlB;AACA,YAAIN,oBAAoB,GAAG,IAA3B;AACA,YAAMvB,QAAQ,GAAGH,GAAG,CAACE,gBAAJ,CAAqBC,QAAtC,CAH2C,CAI3C;;AACA,YAAMU,YAAY,GAAGV,QAAQ,CAACW,GAAT,CAAaR,GAAb,CAArB;;AACA,YAAIO,YAAJ,EAAkB;AACdmB,UAAAA,WAAW,GAAGnB,YAAY,CAACmB,WAA3B;AACAnB,UAAAA,YAAY,CAACsB,mBAAb,GAAmC,IAAnC,CAFc,CAGd;AACA;;AACA,cAAItB,YAAY,CAACuB,mBAAb,IAAoCvB,YAAY,CAACF,mBAArD,EAA0E;AACtEe,YAAAA,oBAAoB,GAAG1B,GAAG,CAACE,gBAAJ,CAAqBa,UAArB,CAAgCT,GAAhC,CAAvB;AACH;AACJ,SARD,MAQO;AACH,cAAIN,GAAG,CAAC4B,UAAR,EAAoBC,OAAO,CAACC,GAAR,wDAA4DxB,GAA5D;AACvB;;AACD,eAAO0B,WAAP;AACH,OAlBD;AAmBH;AACJ,GArJD;AAsJH,CA9Jc,E","sourcesContent":["export default (() => {\n    /**\n     * Creates an api.bindingsRegistry namespace used to manage custom client-side bindings.\n     * This includes control events and the custom actions Register Event, Deregister Event and Fire Event.\n     * Dependencies:\n     *    api.loadExtension\n     */\n    // Create a registry to manage custom client-side bindings\n    api.loadExtension(\"api.bindingsRegistry\", () => {\n        if (!api.bindingsRegistry.bindings) {\n            api.bindingsRegistry.bindings = new Map();\n        }\n\n        if (!api.bindingsRegistry.register) {\n            /**\n             * Registers an item and executes its onRegister function. If an item with the key already exists,\n             * the previously registered item's onDeregister function will be executed first.\n             * @param  {object}   key                 A unique key to track the item.\n             * @param  {function} onRegister          The function to be called upon registration.\n             * @param  {function} onDeregister        The optional function that will be called upon deregistration.\n             * @param  {function} onExecute           The optional function that can be called upon demand.\n             * @param  {integer}  executionInterval   Then optional interval in milliseconds at which the binding should be executed.\n             * @param  {boolean}  deregisterOnExecute If true, the item's onDeregister function will be called immediately following a call to onExecute.\n             * @param  {any}      registrationFormID  If present, the ID of the form that is registering the binding will be stored on the item.\n             * @return {object}                       The registered item, including any registrationResult returned by the onRegister function.\n             */\n            api.bindingsRegistry.register = ({ key, onRegister, onDeregister, onExecute, executionInterval, deregisterOnExecute, registrationFormID }) => {\n                const bindings = api.bindingsRegistry.bindings;\n                // Look for the item in the registry\n                let registryItem = bindings.get(key);\n                if (registryItem) {\n                    // Automatically deregister previous registration if the item is found\n                    api.bindingsRegistry.deregister(key);\n                }\n                registryItem = {\n                    onRegister,\n                    onDeregister,\n                    onExecute,\n                    deregisterOnExecute,\n                    registrationFormID,\n                    registrationResult: api.utils.runFunction(onRegister, null, [ registryItem ]),\n                };\n                // Add the binding to the registry and return it\n                bindings.set(key, registryItem);\n                // Start time-based execution if interval present\n                executionInterval = Number.parseInt(executionInterval);\n                if (executionInterval) {\n                    registryItem.executionIntervalHandle = window.setInterval(() => { return api.bindingsRegistry.execute({ key }); }, executionInterval);\n                }\n                return registryItem;\n            };\n        }\n\n        if (!api.bindingsRegistry.deregister) {\n            /**\n             * Deregisters an item, calling any onDeregister function that was passed when the item was registered.\n             * @param  {object} key    The key to the item that was previously registered.\n             * @return {object}        The value returned by the executed deregistration function.\n             */\n            api.bindingsRegistry.deregister = key => {\n                const bindings = api.bindingsRegistry.bindings;\n                let deregistrationResult = null;\n                // Look for the item in the registry\n                const registryItem = bindings.get(key);\n                if (registryItem) {\n                    // Run any deregistration and remove it from the registry\n                    deregistrationResult = api.utils.runFunction(registryItem.onDeregister, null, [ registryItem ]);\n                    // Stop interval-based execution if necessary\n                    if (registryItem.executionIntervalHandle) {\n                        window.clearInterval(registryItem.executionIntervalHandle);\n                        registryItem.executionIntervalHandle = null;\n                    }\n                    bindings.delete(key);\n                } else {\n                    if (api._debugMode) console.log(`No binding has been registered with the key '${key}'.`);\n                }\n                return deregistrationResult;\n            };\n        }\n\n        if (!api.bindingsRegistry.execute) {\n            /**\n             * Executes a registered item, optionally deregistering it if specified to do so.\n             * @param  {object}  key                The key to the item that was previously registered.\n             * @param  {boolean} deregister         If true, the item's onDeregister function will be called after execution.\n             * @param  {any}     executionFormID    If present, the ID of the form that is executing the binding will be temporarily stored on the item.\n             * @return {object}                     The value returned by the executed function, if any; otherwise, any deregistration function return value.\n             */\n            api.bindingsRegistry.execute = ({ key, executionFormID, deregister, passedValue }) => {\n                const bindings = api.bindingsRegistry.bindings;\n                let executionResult = null;\n                let deregistrationResult = null;\n                // Look for the item in the registry\n                const registryItem = bindings.get(key);\n                if (registryItem) {\n                    // Store the executor\n                    registryItem.executionFormID = executionFormID;\n                    // Make passed value available to listeners\n                    registryItem.passedValue = passedValue;\n                    // Run execution function\n                    executionResult = api.utils.runFunction(registryItem.onExecute, null, [ registryItem ]);\n                    // Save execution result in case listeners need it\n                    registryItem.executionResult = executionResult;\n                    // Deregister if binding item flag or override parameter indicates to do so\n                    if (registryItem.deregisterOnExecute || deregister) {\n                        // If we weren't eplicitly asked to deregister in this call and a passedValue was provided,\n                        // set a flag that indicates to delay deregistration until passedValue is read\n                        if (!deregister && passedValue !== undefined && registryItem.executedPassedValue !== true) {\n                            registryItem.delayDeregistration = true;\n                        } else  {\n                            deregistrationResult = api.bindingsRegistry.deregister(key);\n                        }\n                    }\n                } else {\n                    if (api._debugMode) console.log(`No binding has been registered with the key '${key}'.`);\n                }\n                // Return execution result, if any; otherwise, return any deregistration result\n                return executionResult || deregistrationResult;\n            };\n        }\n\n        if (!api.bindingsRegistry.getExecutionResult) {\n            api.bindingsRegistry.getExecutionResult = (key) => {\n                let executionResult = null;\n                const bindings = api.bindingsRegistry.bindings;\n                // Look for the item in the registry\n                const registryItem = bindings.get(key);\n                if (registryItem) {\n                    executionResult = registryItem.executionResult;\n                } else {\n                    if (api._debugMode) console.log(`No binding has been registered with the key '${key}'.`);\n                }\n                return executionResult;\n            }\n        }\n\n        if (!api.bindingsRegistry.getPassedValue) {\n            api.bindingsRegistry.getPassedValue = (key) => {\n                let passedValue = null;\n                let deregistrationResult = null;\n                const bindings = api.bindingsRegistry.bindings;\n                // Look for the item in the registry\n                const registryItem = bindings.get(key);\n                if (registryItem) {\n                    passedValue = registryItem.passedValue;\n                    registryItem.executedPassedValue = true;\n                    // If the flag was set to delay deregistration until after passedValue has been read,\n                    // we can now safely deregister the registry item since we've been asked for the passedValue\n                    if (registryItem.delayDeregistration && registryItem.deregisterOnExecute) {\n                        deregistrationResult = api.bindingsRegistry.deregister(key);\n                    }\n                } else {\n                    if (api._debugMode) console.log(`No binding has been registered with the key '${key}'.`);\n                }\n                return passedValue;\n            }\n        }\n    });\n})();\n"],"file":"bindingsRegistry.js"}