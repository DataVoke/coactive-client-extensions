{"version":3,"sources":["../../src/api/utils.js"],"names":["api","loadExtension","utils","svgToDataUrl","svgXmlString","color","opacity","replace","encoded","window","encodeURIComponent","getWebResourceAsync","url","encoding","app","dv","services","call","svc","fn","callEndpointAsync","endpoint","args","service","Promise","resolve","reject","connection","result","error","getAttachmentUri","attachmentPropertyUID","record","openForms","active","allOpenForms","last","selectedRecord","raw","gridValues","getVal","UID","documentURI","toLinker","id","type","Type","isFunction","item","smartSort","list","matchTerm","values","map","index","value","toString","lowerCaseValue","toLowerCase","equalsSearchTerm","matchPosition","indexOf","sort","a","b","equalSearchTerm","sorted","stringify","object","cache","JSON","key","push","objectComparator","order","hasOwnProperty","varA","toUpperCase","varB","comparison","formOrCollection","forms","Array","isArray","concat","form","apiRef","children","length","getOpenForm","formID","validateFormID","getOpenFormFn","findByID","find","f","drivingView","ViewID","isNaN","linker","findByLinker","Name","openFormAsync","mode","types","OPEN_MODES","NORMAL","formFinder","validFormID","actionLibrary","inlineExe","actions","dvCore","OpenView","viewId","success","actionMessage","openForm","closeForm","typeName","mvc","close"],"mappings":"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","sourcesContent":["/**\n * Custom Action: Extend api.utils\n * Extends the api.utils namespace with additional helper functions.\n * Dependencies:\n *    api.loadExtension\n */\n// Use the extension loader to load the api.utils namespace since that namespace's content is a dependency of most other namespaces\napi.loadExtension(\"api.utils\", () => {\n    if (!api.utils.svgToDataUrl) {\n        api.utils.svgToDataUrl = (svgXmlString, color, opacity = 1) => {\n            // if (!color) {\n            //     color = (api.runtime && api.runtime.colors && (api.runtime.colors.button_fill || api.runtime.colors.primary_dark)) || '';\n            // }\n            svgXmlString = svgXmlString\n                .replace(/fill\\-opacity=\"\"/g, `fill-opacity=\"${opacity}\"`)\n                .replace(/fill=\"\"/g, `fill=\"${color}\"`);\n            const encoded = window.encodeURIComponent(svgXmlString)\n                .replace(/'/g, '%27')\n                .replace(/\"/g, '%22');\n\n            return `data:image/svg+xml,${encoded}`;\n        }\n    }\n\n    if (!api.utils.getWebResourceAsync) {\n        /**\n         * Proxies a web resource request via the application service.\n         * @param  [string]           url        The URL to the resource.\n         * @param  [string=\"utf8\"]    encoding   Optional encoding (defaults to utf8).\n         * @return [Promise(object)]             Returns a promise that resolves to an object with { contentType, dataResponse }.\n         **/\n        api.utils.getWebResourceAsync = (url, encoding = \"utf8\") => {\n            return app.dv.services.call({\n                svc: \"Support\",\n                fn: \"ProxyWebResource\",\n            }, {\n                url,\n                encoding\n            });\n        };\n    }\n\n    if (!api.utils.callEndpointAsync) {\n        /**\n         * Calls an endpoint.\n         * @param  [string]           endpoint   The endpoint name.\n         * @param  [object]           args       Object containing arguments to be passed to endpoint.\n         * @param  [string=\"Custom\"]  service    The service name (defaults to \"Custom\").\n         * @return [Promise(object)]             Returns a promise that resolves to an object returned by the endpoint.\n         **/\n        api.utils.callEndpointAsync = (endpoint, args, service = \"Custom\") => {\n            return new Promise((resolve, reject) => {\n                app.connection.call(service, endpoint, args, (result, error) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            });\n        };\n    }\n\n    if (!api.utils.getAttachmentUri) {\n        /**\n         * Gets a URI to the specified attachment property on the specified (or currently selected) record.\n         * @param  [string]                       attachmentPropertyUID                             The unique ID of the attachment property.\n         * @param  [datavoke.entities.gridRecord] record[api.openForms.active.selectedRecord.raw]   The record with the attachment (optional); defaults to the currently selected record.\n         * @return [string]                                                                         The URI of the attachment, if any; null if no attachment exists for the record.\n         */\n        api.utils.getAttachmentUri = (attachmentPropertyUID, record = (api.openForms.active || api.openForms.allOpenForms().last()).selectedRecord.raw) => {\n            return record.gridValues.getVal({ UID: attachmentPropertyUID }).documentURI;\n        };\n    }\n\n    if (!api.utils.toLinker) {\n        /**\n         * Constructs a linker object  if object is not already one.\n         * @param    {string|object}        id    String identifier or a linker object.\n         * @param    {string=\"Property\"}    type  Entity type to identify (\"Property\", \"View\", etc.).\n         * @return   {object}               { Type(string), UID(GUID) }\n         */\n        api.utils.toLinker = (id, type = \"Property\") => {\n            if (typeof id === \"string\") {\n                return { Type: type, UID: id };\n            } else {\n                // TODO: More validation of the object\n                return id;\n            }\n        };\n    }\n\n    if (!api.utils.isFunction) {\n        /**\n         * Determines whether an object is a function.\n         * @param    {object}    item    Item to test.\n         * @return   {boolean}   True if item is a function; otherwise, false.\n         */\n        api.utils.isFunction = item => {\n            return item && typeof(item) === \"function\";\n        };\n    }\n\n    if (!api.utils.smartSort) {\n        api.utils.smartSort = (list, matchTerm) => {\n            const values = list.map((item, index) => {\n                const value = item ? item.toString() : \"\";\n                const lowerCaseValue = value.toLowerCase();\n                const equalsSearchTerm = lowerCaseValue === matchTerm;\n                const matchPosition = equalsSearchTerm ? 0 : (matchTerm ? lowerCaseValue.indexOf(matchTerm) : -1);\n                return {\n                    index,\n                    value,\n                    equalsSearchTerm,\n                    matchPosition\n                };\n            });\n            values.sort((a, b) => {\n                // Exact matches always come first\n                if (a.equalsSearchTerm && !b.equalSearchTerm) {\n                    return -1;\n                }\n                if (b.equalSearchTerm) {\n                    return 1;\n                }\n                // Matches that start with the search term come next\n                if (a.matchPosition === 0 && b.matchPosition !== 0) {\n                    return -1;\n                }\n                if (b.matchPosition === 0) {\n                    return 1;\n                }\n                // Sort things normally from here on\n                if (a.value > b.value) {\n                    return 1;\n                }\n                if (a.value < b.value) {\n                    return -1;\n                }\n                return 0;\n            });\n            const sorted = values.map(item => list[item.index]);\n            return sorted;\n        };\n    }\n\n    if (!api.utils.stringify) {\n        /**\n         * Custom JSON.stringify implementation that prevents circular reference errors.\n         * @param   {object}        object            The object to be stringified.\n         * @returns {string}                          A string representation of the object.\n         */\n        api.utils.stringify = object => {\n            const cache = [];\n            return JSON.stringify(object, (key, value) => {\n                if (typeof value === \"object\" && value !== null) {\n                    if (cache.indexOf(value) !== -1) {\n                        return;\n                    }\n                    cache.push(value);\n                }\n                return value;\n            });\n        };\n    }\n\n    if (!api.utils.objectComparator) {\n        api.utils.objectComparator = (key, order = 'asc') => {\n            return (a, b) => {\n                if(!a.hasOwnProperty(key) ||\n                    !b.hasOwnProperty(key)) {\n                    return 0;\n                }\n\n                const varA = (typeof a[key] === 'string') ?\n                    a[key].toUpperCase() : a[key];\n                const varB = (typeof b[key] === 'string') ?\n                    b[key].toUpperCase() : b[key];\n\n                let comparison = 0;\n                if (varA > varB) {\n                    comparison = 1;\n                } else if (varA < varB) {\n                    comparison = -1;\n                }\n                return order == 'desc' ? comparison * -1 : comparison;\n            };\n        };\n    }\n\n    if (!api.utils.allOpenForms) {\n        /**\n         * Given a form or collection of forms, returns a flattened array of the original form(s) and all of their currently loaded descendant forms.\n         * @param   {object|Array[=api.openForms.allOpenForms()]}        formOrCollection    A single loaded form or a collection of them to search for descendants.\n         *                                                                                   If not passed, all top-level currently open forms will be used.\n         * @returns {Array}                                                                  The form(s) passed in and all currently loaded embedded forms.\n         */\n        api.utils.allOpenForms = formOrCollection => {\n            let forms = formOrCollection;\n            if (!forms) {\n                forms = api.openForms.allOpenForms();\n            }\n            if (!Array.isArray(forms)) {\n                forms = [forms];\n            }\n            return [].concat(...forms.map(form => {\n                form = form.raw ? form : form.apiRef;\n                if (form.raw && form.raw.children && Array.isArray(form.raw.children) && form.raw.children.length) {\n                    return [].concat(form, ...api.utils.allOpenForms(form.raw.children));\n                } else {\n                    return form;\n                }\n            }));\n        };\n    }\n\n    if (!api.utils.getOpenForm) {\n        /**\n         * Finds a form.\n         * @param {Object} formID  An API Name, a numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n         * @returns                A reference to an open form.\n         */\n        api.utils.getOpenForm = formID => {\n            const form = api.utils.validateFormID(formID).getOpenFormFn();\n            if (form) {\n                return form.raw;\n            } else {\n                return null;\n            }\n        };\n    }\n\n    if (!api.utils.validateFormID) {\n        /**\n         * Validates a form identifier and determines the appropriate look-up function for the ID.\n         * @param {Object} formID  An API Name, numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n         * @returns                A valid form identifier and a function to find an open form using the identifier.\n         */\n        api.utils.validateFormID = formID => {\n            let getOpenFormFn = (id = formID) => api.openForms.findByID(id) ||\n                api.utils.allOpenForms().find(f => f.raw && f.raw.drivingView && f.raw.drivingView.ViewID && f.raw.drivingView.ViewID === id);\n            // Determine the identifier type\n            if (isNaN(formID)) {\n                // Ensure non-numeric ID is a linker\n                formID = api.utils.toLinker(formID, \"View\");\n                getOpenFormFn = (linker = formID) => api.openForms.findByLinker(linker) ||\n                    api.utils.allOpenForms().find(f => f.raw && f.raw.drivingView && (f.raw.drivingView.UID === linker.UID || f.raw.drivingView.Name === linker.UID));\n            }\n            return {\n                formID,\n                getOpenFormFn,\n            };\n        };\n    }\n\n    if (!api.utils.openFormAsync) {\n        /**\n         * Opens a form.\n         * @param {Object} formID                            A numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n         * @param {number} [mode=app.dv.types.OPEN_MODES]    One of the [app.dv.types.OPEN_MODES] to use when opening the form.\n         * @returns {Promise}                                A promise that ultimately returns the opened form.\n         */\n        api.utils.openFormAsync = (formID, mode = app.dv.types.OPEN_MODES.NORMAL) => {\n            return new Promise((resolve, reject) => {\n                const formFinder = api.utils.validateFormID(formID);\n                const validFormID = formFinder.formID;\n                app.dv.actionLibrary.inlineExe(null, api.actions.dvCore.OpenView, { viewId: validFormID, mode }, result => {\n                    if (result.success) {\n                        const form = formFinder.getOpenFormFn();\n                        if (!form) {\n                            reject(`The form (ID: ${formID}) was reported to be opened, but its key could not be located in api.openForms.`);\n                        }\n                        resolve(form.raw);\n                    } else {\n                        reject(`The form (ID: ${formID}) could not be opened.${result.actionMessage ? \" Action Message: \" + result.actionMessage : \"\"}`);\n                    }\n                });\n            });\n        };\n    }\n\n    if (!api.utils.openForm) {\n        /**\n         * Opens a form.\n         * @param {Object} formID                            A numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n         * @param {number} [mode=app.dv.types.OPEN_MODES]    One of the [app.dv.types.OPEN_MODES] to use when opening the form.\n         */\n        api.utils.openForm = (formID, mode = app.dv.types.OPEN_MODES.NORMAL) => {\n            api.utils.openFormAsync(formID, mode);\n        }\n    }\n\n    if (!api.utils.closeForm) {\n        /**\n         * Closes a form.\n         * @param {Object} formID    A raw form, or a numeric ID, UID or linker ({ UID: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", Type: \"View\" }) that identifies the form.\n         */\n        api.utils.closeForm = (form) => {\n            if (!form.typeName || form.typeName !== \"app.dv.mvc\") {\n                const formFinder = api.utils.validateFormID(form);\n                form = api.utils.getOpenForm(formFinder.formID);\n            }\n            if (form) {\n                app.dv.mvc.close(form);\n            }\n        };\n    }\n});\n"],"file":"utils.js"}